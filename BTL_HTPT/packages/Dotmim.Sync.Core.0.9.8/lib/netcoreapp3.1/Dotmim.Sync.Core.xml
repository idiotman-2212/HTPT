<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dotmim.Sync.Core</name>
    </assembly>
    <members>
        <member name="T:Dotmim.Sync.ApplyChangesConflictOccuredArgs">
            <summary>
            Raised as an argument when an apply is failing. Waiting from user for the conflict resolution
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.Resolution">
            <summary>
            Gets or Sets the action to be taken when resolving the conflict. 
            If you choose MergeRow, FinalRow will be merged in both sources
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.ProgressLevel">
            <summary>
            Gets the Progress level used to determine if message is output
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.SenderScopeId">
            <summary>
            Gets or Sets the scope id who will be marked as winner
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.FinalRow">
            <summary>
            If we have a merge action, the final row represents the merged row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesConflictOccuredArgs.GetSyncConflictAsync">
            <summary>
            Get the conflict that occurs by selecting the local conflict row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesConflictOccuredArgs.#ctor(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.BaseOrchestrator,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.ConflictResolution,System.Nullable{System.Guid},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.Message">
            <inheritdoc />
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.EventId">
            <inheritdoc />
        </member>
        <member name="T:Dotmim.Sync.InterceptorsExtensions">
            <summary>
            Partial interceptors extensions 
            </summary>
            <summary>
            Partial interceptors extensions 
            </summary>
            <summary>
            Partial interceptors extensions 
            </summary>
            <summary>
            Partial interceptors extensions 
            </summary>
            <summary>
            Partial interceptors extensions 
            </summary>
            <summary>
            Partial interceptors extensions 
            </summary>
            <summary>
            Partial interceptors extensions 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesConflictOccured(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ApplyChangesConflictOccuredArgs})">
            <summary>
            Intercept the provider when a conflict is happening
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesConflictOccured(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ApplyChangesConflictOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a conflict is happening
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ApplyChangesErrorOccuredArgs})">
            <summary>
            Intercept the provider when an apply change is failing
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ApplyChangesErrorOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when an apply change is failing
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesApplyingArgs})">
            <summary>
            Occurs when a batch for a particular table is about to be applied on the local data source
            <example>
            <code>
            agent.LocalOrchestrator.OnBatchChangesApplying(async args =>
            {
                if (args.BatchPartInfo != null)
                {
                    Console.WriteLine($"FileName:{args.BatchPartInfo.FileName}. RowsCount:{args.BatchPartInfo.RowsCount} ");
                    Console.WriteLine($"Applying rows from this batch part info:");
            
                    var table = await agent.LocalOrchestrator.LoadTableFromBatchPartInfo(args.BatchInfo,
                                      args.BatchPartInfo, args.State, args.Connection, args.Transaction);
            
                    foreach (var row in table.Rows)
                        Console.WriteLine(row);
            
                }
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.BatchChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesAppliedArgs})">
            <summary>
            Occurs when a batch for a particular table has been applied on the local data source
            <example>
            <code>
            agent.LocalOrchestrator.OnBatchChangesApplied(async args =>
            {
                if (args.BatchPartInfo != null)
                {
                    Console.WriteLine($"FileName:{args.BatchPartInfo.FileName}. RowsCount:{args.BatchPartInfo.RowsCount} ");
                    Console.WriteLine($"Rows applied from this batch part info:");
            
                    var table = await agent.LocalOrchestrator.LoadTableFromBatchPartInfo(args.BatchInfo,
                                      args.BatchPartInfo, args.State, args.Connection, args.Transaction);
            
                    foreach (var row in table.Rows)
                        Console.WriteLine(row);
            
                }
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.BatchChangesAppliedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesAppliedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesCreatedArgs})">
            <summary>
            Occurs when a batch for a particular table has been applied on the local data source
            <example>
            <code>
            agent.LocalOrchestrator.OnBatchChangesApplied(async args =>
            {
                if (args.BatchPartInfo != null)
                {
                    Console.WriteLine($"FileName:{args.BatchPartInfo.FileName}. RowsCount:{args.BatchPartInfo.RowsCount} ");
                    Console.WriteLine($"Rows applied from this batch part info:");
            
                    var table = await agent.LocalOrchestrator.LoadTableFromBatchPartInfoAsync(args.BatchInfo,
                                      args.BatchPartInfo, args.State, args.Connection, args.Transaction);
            
                    foreach (var row in table.Rows)
                        Console.WriteLine(row);
            
                }
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.BatchChangesCreatedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesCreatedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ColumnCreatingArgs})">
            <summary>
            Intercept the provider when a column is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a column is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ColumnCreatedArgs})">
            <summary>
            Intercept the provider when a column is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ColumnCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a column is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ColumnDroppingArgs})">
            <summary>
            Intercept the provider when a column is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ColumnDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a column is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ColumnDroppedArgs})">
            <summary>
            Intercept the provider when a column is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnColumnDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ColumnDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a column is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConflictingSetup(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ConflictingSetupArgs})">
            <summary>
            Intercept the provider if the local setup is conflicting with the remote setup
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConflictingSetup(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ConflictingSetupArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider if the local setup is conflicting with the remote setup
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesApplyingArgs})">
            <summary>
            Intercept the provider action when changes are going to be applied on local database
            <example>
            <code>
            localOrchestrator.OnDatabaseChangesApplying(args =>
            {
              Console.WriteLine($"Directory: {args.ApplyChanges.Changes.DirectoryName}. " +
                $"Number of files: {args.ApplyChanges.Changes.BatchPartsInfo?.Count()} ");
            
              Console.WriteLine($"Total: {args.ApplyChanges.Changes.RowsCount} ");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesAppliedArgs})">
            <summary>
            Intercept the provider action when changes are applied on each table defined in the configuration schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when changes are applied on each table defined in the configuration schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectingArgs})">
            <summary>
            Occurs when changes are going to be queried from the underline database
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnDatabaseChangesSelecting(args => {
              Console.WriteLine($"Getting changes from local database:");
              Console.WriteLine($"Batch directory: {args.BatchDirectory}. Batch size: {args.BatchSize}. Is first sync: {args.IsNew}");
              Console.WriteLine($"From: {args.FromTimestamp}. To: {args.ToTimestamp}.");
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesSelectingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectedArgs})">
            <summary>
            Occurs when changes have been retrieved from the local database
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnDatabaseChangesSelected(args =>
            {
              Console.WriteLine($"Directory: {args.BatchInfo.DirectoryName}. Number of files: {args.BatchInfo.BatchPartsInfo?.Count()} ");
              Console.WriteLine($"Total: {args.ChangesSelected.TotalChangesSelected} " +
                        $"({args.ChangesSelected.TotalChangesSelectedUpdates}/{args.ChangesSelected.TotalChangesSelectedDeletes})");
              foreach (var table in args.ChangesSelected.TableChangesSelected)
                      Console.WriteLine($"Table: {table.TableName}. Total: {table.TotalChanges} ({table.Upserts / table.Deletes}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesSelectedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnExecuteCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ExecuteCommandArgs})">
            <summary>
            Occurs when a command is about to be executed on the underline provider
            <example>
            <code>
            agent.RemoteOrchestrator.OnExecuteCommand(args =>
            {
                Console.WriteLine(args.Command.CommandText);
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnExecuteCommand(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ExecuteCommandArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnExecuteCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ExecuteCommandArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGetCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.GetCommandArgs})">
            <summary>
            Occurs every time we get a command from the underline provider
            <para>
            You can change the command text and even the parameters values if needed
            </para>
            <example>
            <code>
            agent.RemoteOrchestrator.OnGetCommand(args =>
            {
                if (args.Command.CommandType == CommandType.StoredProcedure)
                {
                    args.Command.CommandText = args.Command.CommandText.Replace("_filterproducts_", "_default_");
                }
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGetCommand(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.GetCommandArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnGetCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.GetCommandArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDropAll(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DropAllArgs})">
            <summary>
            Intercept the provider when a DropAll is called where you specified you want to drop the tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDropAll(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DropAllArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a DropAll is called where you specified you want to drop the tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoading(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.LocalTimestampLoadingArgs})">
            <summary>
            Intercept the provider action when a database is reading a timestamp
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoading(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.LocalTimestampLoadingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a database is reading a timestamp
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoaded(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.LocalTimestampLoadedArgs})">
            <summary>
            Intercept the provider action when a database has read a timestamp
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoaded(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.LocalTimestampLoadedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a database has read a timestamp
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaning(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.MetadataCleaningArgs})">
            <summary>
            Intercept the provider action when a provider is cleaning metadata
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaning(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.MetadataCleaningArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a provider is cleaning metadata
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaned(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.MetadataCleanedArgs})">
            <summary>
            Intercept the provider action when a provider has cleaned metadata
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaned(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.MetadataCleanedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a provider has cleaned metadata
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGettingOperation(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OperationArgs})">
            <summary>
            Occurs when server receives a first request for a sync. Can override the whole processus, depending 
            on the <see cref="T:Dotmim.Sync.Enumerations.SyncOperation"/> argument
            <example>
            <code>
            [HttpPost]
            public async Task Post()
            {
                var scopeName = context.GetScopeName();
                var clientScopeId = context.GetClientScopeId();
                var webServerAgent = webServerAgents.First(wsa => wsa.ScopeName == scopeName);
                webServerAgent.RemoteOrchestrator.OnGettingOperation(operationArgs =>
                {
                    if (clientScopeId == A_PARTICULAR_CLIENT_ID_TO_CHECK)
                        operationArgs.SyncOperation = SyncOperation.ReinitializeWithUpload;
                });
                await webServerAgent.HandleRequestAsync(context);
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGettingOperation(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.OperationArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnGettingOperation(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OperationArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnOutdated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OutdatedArgs})">
            <summary>
            Intercept the provider action when a database is out dated. Always happens on the client side
            <example>
            <code>
            agent.LocalOrchestrator.OnOutdated(oa =>
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("local database is too old to synchronize with the server.");
                Console.ResetColor();
                Console.WriteLine("Do you want to synchronize anyway, and potentially lost data ? ");
                Console.Write("Enter a value ('r' for reinitialize or 'ru' for reinitialize with upload): ");
                var answer = Console.ReadLine();
            
                if (answer.ToLowerInvariant() == "r")
                    oa.Action = OutdatedAction.Reinitialize;
                else if (answer.ToLowerInvariant() == "ru")
                    oa.Action = OutdatedAction.ReinitializeWithUpload;
            
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnOutdated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.OutdatedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnOutdated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OutdatedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioning(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisioningArgs})">
            <summary>
            Intercept the provider before it begins a database provisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioning(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisioningArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a database provisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioned(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisionedArgs})">
            <summary>
            Intercept the provider after it has provisioned a database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioned(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisionedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has provisioned a database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioning(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisioningArgs})">
            <summary>
            Intercept the provider before it begins a database deprovisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioning(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisioningArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a database deprovisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioned(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisionedArgs})">
            <summary>
            Intercept the provider after it has deprovisioned a database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioned(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisionedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has deprovisioned a database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioningTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisioningTableArgs})">
            <summary>
            Intercept the provider before it begins a table provisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioningTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisioningTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a table provisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisionedTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisionedTableArgs})">
            <summary>
            Intercept the provider after it has provisioned a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisionedTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisionedTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has provisioned a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioningTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisioningTableArgs})">
            <summary>
            Intercept the provider before it begins a table deprovisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioningTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisioningTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a table deprovisioning
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisionedTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisionedTableArgs})">
            <summary>
            Intercept the provider after it has deprovisioned a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisionedTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisionedTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has deprovisioned a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesApplyingArgs})">
            <summary>
            Occurs just before applying a batch of rows to the local (client or server) database.
            <para>
            The number of rows to be applied here is depending on:
            <list type="bullet">
            The batch size you have set in your SyncOptions instance : <c>SyncOptions.BatchSize</c> (Default is 2 Mo)
            </list>
            <list type="bullet">
            The max number of rows to applied in one single instruction : <c>Provider.BulkBatchMaxLinesCount</c> (Default is 10 000 rows per instruction)
            </list>
            </para>
            <example>
            <code>
            localOrchestrator.OnRowsChangesApplying(async args =>
            {
                Console.WriteLine($"- In memory rows that are going to be Applied");
                foreach (var row in args.SyncRows)
                    Console.WriteLine(row);
            
                Console.WriteLine();
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesFallbackFromBatchToSingleRowApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs})">
            <summary>
            Occurs when a batch was not applied successfully and DMS tries to fallback to one row per row applying
            <example>
            <code>
            localOrchestrator.OnRowsChangesFallbackFromBatchToSingleRowApplying(async args =>
            {
                Console.WriteLine($"- In memory rows that are going to be Applied one by one because of an error occured during batch applying");
                Console.WriteLine($"- Error raised causing the fallback: {args.Exception.Message}");
                Console.WriteLine($"- Rows count to apply one by one: {args.SyncRows.Count}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesFallbackFromBatchToSingleRowApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesFallbackFromBatchToSingleRowApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesAppliedArgs})">
            <summary>
            Occurs just after a batch or rows have been applied to the local (client or server) database
            <para>
            The number of rows applied here is depending on:
            <list type="bullet">
            The batch size you have set in your SyncOptions instance : <c>SyncOptions.BatchSize</c> (Default is 2 Mo)
            </list>
            <list type="bullet">
            The max number of rows to applied in one single instruction : <c>Provider.BulkBatchMaxLinesCount</c> (Default is 10 000 rows per instruction)
            </list>
            </para>
            <example>
            <code>
            localOrchestrator.OnRowsChangesApplied(async args =>
            {
                Console.WriteLine($"- In memory rows that are applied, but still in the on going transaction");
                foreach (var row in args.SyncRows)
                    Console.WriteLine(row);
            
                Console.WriteLine();
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesAppliedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesAppliedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesSelectedArgs})">
            <summary>
            Intercept the provider action when a sync row is about to be serialized in a batch part info after have been selected from the data source
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnRowsChangesSelected(args =>
            {
                Console.WriteLine($"Row read from local database for table:{args.SchemaTable.GetFullName()}");
                Console.WriteLine($"{args.SyncRow}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesSelectedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesSelectedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoaded(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaLoadedArgs})">
            <summary>
            Intercept the provider when schema is loaded
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoaded(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaLoadedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when schema is loaded
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoading(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaLoadingArgs})">
            <summary>
            Intercept the provider when schema is loading
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoading(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaLoadingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when schema is loading
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableCreatingArgs})">
            <summary>
            Intercept the provider action when a scope table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableCreatedArgs})">
            <summary>
            Intercept the provider action when a scope table is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableDroppingArgs})">
            <summary>
            Intercept the provider action when a scope table is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableDroppedArgs})">
            <summary>
            Intercept the provider action when a scope table is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoading(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoLoadingArgs})">
            <summary>
            Intercept the provider action when a client scope is about to be loaded from client database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoading(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoLoadingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a client scope is about to be loaded from client database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoaded(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoLoadedArgs})">
            <summary>
            Intercept the provider action when a scope is loaded from client or server database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoaded(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoLoadedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope is loaded from client or server database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaving(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoSavingArgs})">
            <summary>
            Intercept the provider action when a scope is saving
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaving(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoSavingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope is saving
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaved(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoSavedArgs})">
            <summary>
            Intercept the provider action when a scope is saved
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaved(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoSavedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope is saved
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSerializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SerializingRowArgs})">
            <summary>
            Occurs just before serializing a SyncRow in a json stream
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSerializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SerializingRowArgs,System.Threading.Tasks.Task})">
            <summary>
            Occurs just before serializing a SyncRow in a json stream
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeserializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeserializingRowArgs})">
            <summary>
            Occurs just after loading a serialized SyncRow from a json stream
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeserializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeserializingRowArgs,System.Threading.Tasks.Task})">
            <summary>
            Occurs just after loading a serialized SyncRow from a json stream
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionOpen(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ConnectionOpenedArgs})">
            <summary>
            Intercept the provider action whenever a connection is opened
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionOpen(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ConnectionOpenedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a connection is opened
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnReConnect(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ReConnectArgs})">
            <summary>
            Occurs when trying to reconnect to a database
            <example>
            <code>
            localOrchestrator.OnReConnect(args => {
                Console.WriteLine($"[Retry] Can't connect to database {args.Connection?.Database}. " +
                $"Retry N°{args.Retry}. " +
                $"Waiting {args.WaitingTimeSpan.Milliseconds}. Exception:{args.HandledException.Message}.");
            });  
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnReConnect(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ReConnectArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnReConnect(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ReConnectArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionOpen(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TransactionOpenedArgs})">
            <summary>
            Intercept the provider action whenever a transaction is opened
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionOpen(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TransactionOpenedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a transaction is opened
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionClose(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ConnectionClosedArgs})">
            <summary>
            Intercept the provider action whenever a connection is closed
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionClose(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ConnectionClosedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a connection is closed
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionCommit(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TransactionCommitArgs})">
            <summary>
            Intercept the provider action whenever a transaction is commit
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionCommit(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TransactionCommitArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a transaction is commit
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionBegin(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SessionBeginArgs})">
            <summary>
            Intercept the provider action when session begin is called
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionBegin(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SessionBeginArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when session begin is called
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionEnd(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SessionEndArgs})">
            <summary>
            Intercept the provider action when session end is called
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionEnd(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SessionEndArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when session end is called
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransientErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TransientErrorOccuredArgs})">
            <summary>
            Intercept the provider action when a transient error is happening
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransientErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TransientErrorOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a transient error is happening
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotCreatingArgs})">
            <summary>
            Intercept the orchestrator when creating a snapshot
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when creating a snapshot
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotCreatedArgs})">
            <summary>
            Intercept the orchestrator when a snapshot has been created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when a snapshot has been created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotApplyingArgs})">
            <summary>
            Intercept the orchestrator when applying a snapshot
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotApplyingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when applying a snapshot
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotAppliedArgs})">
            <summary>
            Intercept the orchestrator when a snapshot has been applied
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when a snapshot has been applied
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureCreatingArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureCreatedArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureDroppingArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureDroppedArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaNameCreatedArgs})">
            <summary>
            Intercept the provider when database schema is created (works only on SQL Server)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaNameCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when database schema is created (works only on SQL Server)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaNameCreatingArgs})">
            <summary>
            Intercept the provider when database schema is creating (works only on SQL Server)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaNameCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when database schema is creating (works only on SQL Server)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableCreatingArgs})">
            <summary>
            Intercept the provider when a table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableCreatedArgs})">
            <summary>
            Intercept the provider when a table is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableDroppingArgs})">
            <summary>
            Intercept the provider when a table is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableDroppedArgs})">
            <summary>
            Intercept the provider when a table is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesApplyingArgs})">
            <summary>
            Occurs when a table is about to be applied on the local data source
            <example>
            <code>
            localOrchestrator.OnTableChangesApplying(async args =>
            {
                if (args.BatchPartInfos != null)
                {
                    var syncTable = await localOrchestrator.LoadTableFromBatchInfoAsync(
                        args.BatchInfo, args.SchemaTable.TableName, args.SchemaTable.SchemaName, args.State);
            
                    if (syncTable != null "and" syncTable.HasRows)
                    {
                        Console.WriteLine($"Changes for table 
                                {args.SchemaTable.GetFullName()}. Rows:{syncTable.Rows.Count}");
                        foreach (var row in syncTable.Rows)
                            Console.WriteLine(row);
                    }
            
                }
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesAppliedArgs})">
            <summary>
            Intercept the provider action when a all changes have been applied on a datasource table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a all changes have been applied on a datasource table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectingArgs})">
            <summary>
            Occurs when changes are going to be queried from the underline database for a particular table. 
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnTableChangesSelecting(args =>
            {
                Console.WriteLine($"Getting changes from local database " +
                                  $"for table:{args.SchemaTable.GetFullName()}");
            
                Console.WriteLine($"{args.Command.CommandText}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesSelectingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectedArgs})">
            <summary>
            Occurs once a table is fully read during the get changes step. rows are already serialized on disk
            <example>
            <code>
            localOrchestrator.OnTableChangesSelected(args =>
            {
              Console.WriteLine($"Table: {args.SchemaTable.GetFullName()} read. Rows count:{args.BatchInfo.RowsCount}.");
              Console.WriteLine($"Directory: {args.BatchInfo.DirectoryName}. Number of files: {args.BatchPartInfos?.Count()} ");
              Console.WriteLine($"Changes: {args.TableChangesSelected.TotalChanges} ({args.TableChangesSelected.Upserts}/{args.TableChangesSelected.Deletes})");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesSelectedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableResetApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesAppliedArgs})">
            <summary>
            Intercept the provider action when a table is reset due to Reinitialize call
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableResetApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a table is reset due to Reinitialize call
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableCreatingArgs})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableCreatedArgs})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableDroppingArgs})">
            <summary>
            Intercept the provider when a tracking table is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableDroppedArgs})">
            <summary>
            Intercept the provider when a tracking table is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableRenaming(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableRenamingArgs})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableRenaming(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableRenamingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableRenamed(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableRenamedArgs})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableRenamed(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableRenamedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerCreatingArgs})">
            <summary>
            Intercept the provider when a trigger is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is creating
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerCreatedArgs})">
            <summary>
            Intercept the provider when a trigger is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is created
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerDroppingArgs})">
            <summary>
            Intercept the provider when a trigger is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is dropping
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerDroppedArgs})">
            <summary>
            Intercept the provider when a trigger is dropped
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is dropped
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ApplyChangesErrorOccuredArgs">
            <summary>
            Argument used during OnApplyChangesErrorOccured() interceptor. You need to provide a Resolution (<see cref="T:Dotmim.Sync.Enumerations.ErrorResolution" /> enumeration)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesErrorOccuredArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Exception,Dotmim.Sync.Enumerations.ErrorResolution,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ApplyChangesErrorOccuredArgs" />
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.ErrorRow">
            <summary>
            Gets the current row that has failed to applied
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.SchemaTable">
            <summary>
            Gets the error row schema table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.ApplyType">
            <summary>
            Gets the type of apply command (Upsert / Delete)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.Exception">
            <summary>
            Gets the current exception
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.Resolution">
            <summary>
            Gets or Sets the resolution fo the current error
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.ProgressLevel">
            <summary>
            Gets the overall progress
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.Message">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.EventId">
            <summary>
            Gets the unique event id
            </summary>
        </member>
        <member name="T:Dotmim.Sync.BatchChangesAppliedArgs">
            <summary>
            Event args raised when all changes from a batch, for a particular table, have been applied on a datasource
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.SchemaTable">
            <summary>
            Gets the table schema
            </summary>
        </member>
        <member name="T:Dotmim.Sync.BatchChangesApplyingArgs">
            <summary>
            Event args before a table changes from a batch, for a particular table, is going to be applied on a datasource
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.SchemaTable">
            <summary>
            Gets the table schema
            </summary>
        </member>
        <member name="T:Dotmim.Sync.BatchChangesCreatedArgs">
            <summary>
            Event args raised when a batch file is created and serialized locally, for a particular table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.SchemaTable">
            <summary>
            Gets the table schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.Action">
            <summary>
            Gets or sets an action enumeration value for the action to handle the Conflicting Setups.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.Setup">
            <summary>
            Gets the Setup provided from the SynchronizeAsync() method. May be null
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.ClientScopeInfo">
            <summary>
            Gets or Sets the client scope info used to check if the client is conflicting
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.ServerScopeInfo">
            <summary>
            Gets the server scope info to check if client is conflicting
            </summary>
        </member>
        <member name="F:Dotmim.Sync.ConflictingSetupAction.Abort">
            <summary>
            Abort the sync without raising any Error
            </summary>
        </member>
        <member name="F:Dotmim.Sync.ConflictingSetupAction.Continue">
            <summary>
            Continue the sync process. ClientScopeInfo.Setup / Schema and ServerScopeInfo.Setup / Schema must be equals
            </summary>
        </member>
        <member name="F:Dotmim.Sync.ConflictingSetupAction.Rollback">
            <summary>
            Rollback the sync, raising an error
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesSelectingArgs">
            <summary>
            Event args generated before getting changes on the target database
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesSelectedArgs">
            <summary>
            Event args generated before after getting changes on the target database
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.BatchInfo">
            <summary>
            Get the batch info. Always null when raised from a call from GetEstimatedChangesCount
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesApplyingArgs">
            <summary>
            Event args generated before applying change on the target database
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplyingArgs.ApplyChanges">
            <summary>
            All parameters that will be used to apply changes
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesAppliedArgs">
            <summary>
            Event args generated after changes applied
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleanedArgs.DatabaseMetadatasCleaned">
            <summary>
            Gets or Sets the rows count cleaned for all tables, during a DeleteMetadatasAsync call
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.Action">
            <summary>
            Gets or sets an action enumeration value for the action to handle the outdated peer.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.ScopeInfoClientFromClient">
            <summary>
            Gets the client scope info used to check if the client is outdated
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.ScopeInfoFromServer">
            <summary>
            Gets the server scope info to check if client is outdated
            </summary>
        </member>
        <member name="F:Dotmim.Sync.OutdatedAction.Reinitialize">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client
            </summary>
        </member>
        <member name="F:Dotmim.Sync.OutdatedAction.ReinitializeWithUpload">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client, after trying a client upload
            </summary>
        </member>
        <member name="F:Dotmim.Sync.OutdatedAction.Rollback">
            <summary>
            Rollback the synchronization request.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Connection">
            <summary>
            Current connection used 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Transaction">
            <summary>
            Current transaction used for the sync
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Context">
            <summary>
            Gets the current context
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.ProgressLevel">
            <summary>
            Gets the Progress Level
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Hint">
            <summary>
            Gets or Sets an arbitrary args you can use for you own purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProgressArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProgressArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.TypeName">
            <summary>
            Gets the args type
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Message">
            <summary>
            return a global message about current progress
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Source">
            <summary>
            return the progress initiator source
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.EventId">
            <summary>
            Gets the event id, used for logging purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.ProgressPercentage">
            <summary>
            Gets the overall percentage progress
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProgressArgs.ToString">
            <summary>
            Gets the Message property if any
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.Provision">
            <summary>
            Get the provision type (Flag enum)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.Schema">
            <summary>
            Gets the schema to be applied in the database
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.Provision">
            <summary>
            Get the provision type (Flag enum)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.Setup">
            <summary>
            Gets the schema to be applied in the database
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.Provision">
            <summary>
            Get the provision type (Flag enum)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.Schema">
            <summary>
            Gets the schema to be applied in the database
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.Provision">
            <summary>
            Get the provision type (Flag enum)
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesApplyingArgs">
            <summary>
            Event args before a batch changes is going to be applied on a datasource
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.State">
            <summary>
            Gets the RowState of the applied rows
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesAppliedArgs">
            <summary>
            Event args after a batch changes has been applied on a datasource
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.State">
            <summary>
            Gets the RowState of the applied rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.AppliedCount">
            <summary>
            Get result of sql statement (if AppliedCount == 1, it means row has been applied)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.Exception">
            <summary>
            If not null, an execption has been raised
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.BatchInfo">
            <summary>
            Batchinfo from where SyncRows are coming
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.SyncRows">
            <summary>
            SyncRows applied (or not if Exception is not null)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.SchemaTable">
            <summary>
            SyncRow schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.State">
            <summary>
            Gets the RowState of the applied rows
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesSelectedArgs">
            <summary>
            Contains SyncRow selected to be written in the batchpart info
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.SyncRow">
            <summary>
            Gets or Sets the sync row selected from the underline table.
            You can change this sync row here, before it's serialized on disk.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.SchemaTable">
            <summary>
            Gets the table schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadingArgs.Setup">
            <summary>
            Gets the Setup to be load.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadedArgs.Schema">
            <summary>
            Gets the schema loaded.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SerializingRowArgs">
            <summary>
            Raise before serialize a change set to get a byte array
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.Result">
            <summary>
            Gets or Sets the result string that will be serialized in the json stream
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.SchemaTable">
            <summary>
            Gets the schema table, corresponding to the row array ObjectArray
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.RowArray">
            <summary>
            Gets the row array to serialize
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DeserializingRowArgs">
            <summary>
            Raise just after loading a binary change set from disk, just before calling the deserializer
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ConnectionOpenedArgs">
            <summary>
            Event args generated when a connection is opened
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ReConnectArgs">
            <summary>
            Event args generated when trying to reconnect
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.HandledException">
            <summary>
            Gets the handled exception
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.Retry">
            <summary>
            Gets the retry count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.WaitingTimeSpan">
            <summary>
            Gets the waiting timespan duration
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TransientErrorOccuredArgs">
            <summary>
            Event args generated when a transient error is happenning
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.HandledException">
            <summary>
            Gets the handled exception
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.Retry">
            <summary>
            Gets the retry count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.WaitingTimeSpan">
            <summary>
            Gets the waiting timespan duration
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ConnectionClosedArgs">
            <summary>
            Event args generated when a connection is closed 
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TransactionOpenedArgs">
            <summary>
            Event args generated when a transaction is opened
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TransactionCommitArgs">
            <summary>
            Event args generated when a transaction is commit
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SessionBeginArgs">
            <summary>
            Event args generated during BeginSession stage
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SessionEndArgs">
            <summary>
            Event args generated during EndSession stage
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.SyncResult">
            <summary>
            Gets the sync result
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.SyncException">
            <summary>
            Gets the exception occured if any
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SnapshotApplyingArgs">
            <summary>
            Event args generated before applying a snapshot on the target database
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SnapshotAppliedArgs">
            <summary>
            Event args generated before applying a snapshot on the target database
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SnapshotCreatingArgs">
            <summary>
            Event args generated before creating a snapshot
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.Schema">
            <summary>
            Gets the schema used to create the snapshot
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.SnapshotDirectory">
            <summary>
            Gets the directory used to store the snapshot
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.BatchSize">
            <summary>
            Gets the batchsize of each file
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.Timestamp">
            <summary>
            Gets the timestamp defining the timestamp limit to generate the snapshot
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SnapshotCreatedArgs">
            <summary>
            Event args generated before after a snapshot has been created
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatedArgs.BatchInfo">
            <summary>
            Gets the batch info summarizing the snapshot created
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesAppliedArgs">
            <summary>
            Event args raised when all changes for a table have been applied on a datasource
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesApplyingArgs">
            <summary>
            Event args before a table changes is going to be applied on a datasource
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.State">
            <summary>
            Gets the RowState of the applied rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.SchemaTable">
            <summary>
            Gets the table schema
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesSelectedArgs">
            <summary>
            Contains batches information about changes from underline data sources
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.BatchInfo">
            <summary>
            Gets the BatchInfo related
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.BatchPartInfos">
            <summary>
            Gets the SyncTable instances containing all changes selected.
            If you get this instance from a call from GetEstimatedChangesCount, this property is always null
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.SchemaTable">
            <summary>
            Gets the table schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.TableChangesSelected">
            <summary>
            Gets the incremental summary of changes selected
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesSelectingArgs">
            <summary>
            Raise before selecting changes will occur
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.SchemaTable">
            <summary>
            Gets the table from where the changes are going to be selected.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableResetAppliedArgs">
            <summary>
            Event args raised when a table is reset due to Reinitialize call
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Batch.BatchInfo">
            <summary>
            Represents a Batch, containing a full or serialized change set
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.#ctor">
            <summary>
            Ctor for serializer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new BatchInfo, containing all BatchPartInfo
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.DirectoryName">
            <summary>
            Gets or Sets directory name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.DirectoryRoot">
            <summary>
            Gets or sets directory root
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.Timestamp">
            <summary>
            Gets or sets server timestamp
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.BatchPartsInfo">
            <summary>
            List of batch parts
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.RowsCount">
            <summary>
            Gets or Sets the rows count contained in the batch info
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.SerializerFactoryKey">
            <summary>
            Gets or Sets the Serialization Factory Key used to serialize this batch info
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.SanitizedSchema">
            <summary>
            Only Used for Backward compatibility for version before 0.9.6
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetDirectoryFullPath">
            <summary>
            Get the full path of the Batch directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.HasData">
            <summary>
            Check if this batchinfo has some data
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetNewBatchPartInfoPath(Dotmim.Sync.SyncTable,System.Int32,System.String,System.String)">
            <summary>
            Generate a new full path to store a new batch part info file
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetBatchPartInfoPath(Dotmim.Sync.Batch.BatchPartInfo)">
            <summary>
            Gets the full path + file name for a given batch part info
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.HasData(System.String,System.String)">
            <summary>
            Check if this batchinfo has some data
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetBatchPartsInfo(Dotmim.Sync.SyncTable)">
            <summary>
            Get all batch part for 1 particular table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetBatchPartsInfo(System.String,System.String)">
            <summary>
            Get all batch part for 1 particular table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.EnsureLastBatch">
            <summary>
            Ensure the last batch part has the correct IsLastBatch flag
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GenerateNewFileName(System.String,System.String,System.String,System.String)">
            <summary>
            generate a batch file name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.TryRemoveDirectory">
            <summary>
            try to delete the Batch tmp directory and all the files stored in it
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Batch.BatchPartInfo">
            <summary>
            Info about a BatchPart
            Will be serialized in the BatchInfo file
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.FileName">
            <summary>
            Batch part file name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.Index">
            <summary>
            Ordered batch part file index
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.IsLastBatch">
            <summary>
            Gets if the batch part file is the last one
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.Tables">
            <summary>
            Tables contained in the batchpart (NEW v0.9.3 : Only One table per file)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.RowsCount">
            <summary>
            Tables contained rows count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.State">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.#ctor">
            <summary>
            ctor for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.#ctor(System.String,System.String,System.String,Dotmim.Sync.Enumerations.SyncRowState,System.Int32,System.Int32)">
            <summary>
            ctor for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.ToString">
            <summary>
            Return batch part table name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.GetAllNamesProperties">
            <summary>
            Get the name properties
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Batch.BatchPartTableInfo">
            <summary>
            Represents a serialized table within in a batch file. with the table rows's count contained in the file
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartTableInfo.#ctor">
            <summary>
            Represents a serialized table within in a batch file. with the table rows's count contained in the file
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartTableInfo.#ctor(System.String,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartTableInfo.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartTableInfo.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartTableInfo.RowsCount">
            <summary>
            Tables contained rows count
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartTableInfo.GetAllNamesProperties">
            <summary>
            Get the name properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.EnsureDatabaseAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            First step before creating schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.EnsureTableAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            First step before creating schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.GetAllTablesAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all tables with column names from a database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.GetHelloAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Make a hello test on the current database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.GetTableAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a table with all rows from a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.GetTableDefinitionAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a table definition
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.GetTableColumnsAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a table columns definition
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.ExistsTableAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a table exists
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.DropsTableIfExistsAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drops a table if exists
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbBuilder.RenameTableAsync(System.String,System.String,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Rename a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.RemoveCommands">
            <summary>
            Remove a Command from internal shared dictionary
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetCommandAsync(Dotmim.Sync.Builders.DbScopeCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.SyncFilter)">
            <summary>
            Get the command from provider, check connection is opened, affect connection and transaction
            Prepare the command parameters and add scope parameters
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableBuilder.TableDescription">
            <summary>
            Gets the table description for the current DbBuilder
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableBuilder.Setup">
            <summary>
            Gets or Sets Setup, containing naming prefix and suffix if needed
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableBuilder.TableName">
            <summary>
            Gets the table parsed name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableBuilder.TrackingTableName">
            <summary>
            Gets the tracking table parsed name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.#ctor(Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.SyncSetup,System.String)">
            <summary>
            Construct a DbBuilder
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetColumnsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets a columns list from the datastore
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetRelationsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets all relations from a current table. If composite, must be ordered
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetPrimaryKeysAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all primary keys. If composite, must be ordered
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.GlobalParser.GetParserString(System.String)">
            <summary>
            Get a ParserString thanks to the key. If not available, create a new ParserString and return it
            </summary>
            <param name="key">key composed with leftQuote^rightQuote^input</param>
        </member>
        <member name="M:Dotmim.Sync.Builders.ParserName.Database">
            <summary>
            Add database name if available to the final string
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.ParserName.Schema">
            <summary>
            Add schema if available to the final string
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.ParserName.Quoted">
            <summary>
            Add quotes ([] or ``) on all objects 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.Builders.ParserName.ParseString(System.String,System.String,System.String)">
            <summary>
            Parse the input string and Get a non bracket object name :
              "[Client] ==> Client "
              "[dbo].[client] === > dbo client "
              "dbo.client === > dbo client "
              "Fabrikam.[dbo].[client] === > Fabrikam dbo client "
            </summary>
        </member>
        <member name="T:Dotmim.Sync.CoreProvider">
            <summary>
            Core provider : should be implemented by any server / client provider
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.Orchestrator">
            <summary>
            Gets the reference to the orchestrator owner of this instance
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.OnConnectionOpened(System.Action{System.Data.Common.DbConnection})">
            <summary>
            Connection is opened. this method is called before any interceptors
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.OnConnectionClosed(System.Action{System.Data.Common.DbConnection})">
            <summary>
            Connection is closed. this method is called after all interceptors
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.CreateConnection">
            <summary>
            Create a new instance of the implemented Connection provider
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetDatabaseBuilder">
            <summary>
            Get Database Builder which can create object at the database level
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetTableBuilder(Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.SyncSetup,System.String)">
            <summary>
            Get a table builder helper which can create object at the table level
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetSyncAdapter(Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.SyncSetup,System.String)">
            <summary>
            Get sync adapter which can executes all the commands needed for a complete sync
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetScopeBuilder(System.String)">
            <summary>
            Create a Scope Builder, which can create scope table, and scope config
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetMetadata">
            <summary>
            Gets or sets the metadata resolver (validating the columns definition from the data store)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetProviderTypeName">
            <summary>
            Get the provider type name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetShortProviderTypeName">
            <summary>
            Get the provider type name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetDatabaseName">
            <summary>
            Gets the database name if any
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.ConnectionString">
            <summary>
            Gets or sets the connection string used by the implemented provider
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.CanBeServerProvider">
            <summary>
            Gets a boolean indicating if the provider can be a server side provider
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.ConstraintsLevelAction">
            <summary>
            Gets a value indicating on which level constraints disabling and enabling should be applied
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.IsolationLevel">
            <summary>
            Gets the default isolation level used during transaction
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.BulkBatchMaxLinesCount">
            <summary>
            Gets or Sets the number of line for every batch bulk operations
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.SupportsMultipleActiveResultSets">
            <summary>
            Gets or Sets if the provider supports multi results sets on the same connection
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.UseBulkOperations">
            <summary>
            Gets or Sets if provider should use bulk operations for Insert / Update (only Sql Server)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.DefaultSchemaName">
            <summary>
            Gets or Sets the default schema name ("dbo" for sql server, "public" for postgres or null for mysql)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.AdditionalProperties">
            <summary>
            Gets or Sets Additional options for the provider
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetParsers(Dotmim.Sync.SyncTable,Dotmim.Sync.SyncSetup)">
            <summary>
            Get naming tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.EnsureSyncException(Dotmim.Sync.SyncException)">
            <summary>
            Let a chance to provider to enrich SyncExecption
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.ShouldRetryOn(System.Exception)">
            <summary>
            Let's a chance to retry on error if connection has been refused.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DbSyncAdapter">
            <summary>
            The SyncAdapter is the datasource manager for ONE table
            Should be implemented by every database provider and provide every SQL action
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.TableDescription">
            <summary>
            Gets the table description
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.Setup">
            <summary>
            Gets the setup used 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.ScopeName">
            <summary>
            Gets the scope name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.UseBulkOperations">
            <summary>
            For provider supporting it, set if we are using bulk operations or not.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.ParameterPrefix">
            <summary>
            Get or Sets the prefix to use for Parameters
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.QuotePrefix">
            <summary>
            Gets or Sets the escape character to use for quoted identifiers on left side
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.QuoteSuffix">
            <summary>
            Gets or Sets the escape character to use for quoted identifiers on right side
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.SupportsOutputParameters">
            <summary>
            Gets or Sets a value that indicates if provider supports output parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.#ctor(Dotmim.Sync.SyncTable,Dotmim.Sync.SyncSetup,System.String,System.Boolean)">
            <summary>
            Create a Sync Adapter
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.GetCommand(Dotmim.Sync.Builders.DbCommandType,Dotmim.Sync.SyncFilter)">
            <summary>
            Gets a command from the current table in the adapter
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.AddCommandParameterValue(System.Data.Common.DbParameter,System.Object,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType)">
            <summary>
            Adding a parameter value to a command
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.EnsureCommandParameters(System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.SyncFilter)">
            <summary>
            Parameters have been added to command.
            Ensure all parameters are correct from the provider perspective
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.EnsureCommandParametersValues(System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Parameters values have been added to command
            Ensure all values are correct from the provider perspective
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.GetParameter(System.Data.Common.DbCommand,System.String)">
            <summary>
            Get a parameter even if it's a @param or :param or in_param
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.InternalGetParameter(System.Data.Common.DbCommand,System.String)">
            <summary>
            Get a parameter even if it's a @param or :param or param
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.ExecuteBatchCommandAsync(System.Data.Common.DbCommand,System.Guid,System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable,Dotmim.Sync.SyncTable,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Execute a batch command
            </summary>
        </member>
        <member name="M:Dotmim.Sync.EnumerableExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean,System.Int32)">
            <summary>
            Sorts an enumeration based on dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">source enumeration.</param>
            <param name="dependencies">dependencies.</param>
            <param name="throwOnCycle">if <see langword="true"/> throw exception if Cyclic dependency found.</param>
            <param name="defaultCapacity">default capacity of sorterd buffer.</param>
            <returns></returns>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ApplyAction">
            <summary>
            Specifies the options for processing a row when the row cannot be applied during synchronization.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.Continue">
            <summary>
            Continue processing (ie server wins)
            This is the default behavior.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.RetryWithForceWrite">
            <summary>
            Force the row to be applied by using logic that is included in synchronization adapter commands.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.Merge">
            <summary>
            Force the finale row to be applied locally
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.Throw">
            <summary>
            Force to rollback all the sync processus
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConflictResolution">
            <summary>
            Resolution when a conflict occurs
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.ServerWins">
            <summary>
            Indicates that the change on the server is the conflict winner
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.ClientWins">
            <summary>
            Indicates that the change sent by the client is the conflict winner
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.MergeRow">
            <summary>
            Indicates that you will manage the conflict by filling the final row and sent it to both client and server
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.Throw">
            <summary>
            Indicates that you want to design this conflict as an error (and handle it from the OnApplyChangesErrorOccured interceptor)
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConflictResolutionPolicy">
            <summary>
            Represents the options for the conflict resolution policy to use for synchronization.
            Used in the configuration class
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolutionPolicy.ServerWins">
            <summary>
            Indicates that the change on the server wins in case of a conflict.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolutionPolicy.ClientWins">
            <summary>
            Indicates that the change sent by the client wins in case of a conflict.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConflictType">
            <summary>
            Defines the types of conflicts that can occur during synchronization.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.ErrorsOccurred">
            <summary>
            The peer database threw an exception while applying a change.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.UniqueKeyConstraint">
            <summary>
            The remote datasource raised an unique key constraint error
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteExistsLocalExists">
            <summary>
            The Remote and Local datasources have both updated the same row.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteIsDeletedLocalIsDeleted">
            <summary>
            The Remote and Local datasource have both deleted the same row.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteExistsLocalNotExists">
            <summary>
            The Remote datasource has updated or inserted a row that does not exists in the local datasource.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteNotExistsLocalExists">
            <summary>
            The Local datasource has inserted or updated a row that does not exists in the Remote datasource 
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteExistsLocalIsDeleted">
            <summary>
            The Remote datasource has inserted or updated a row that the Local datasource has deleted.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteIsDeletedLocalExists">
            <summary>
            The Remote datasource has deleted a row that the Local datasource has inserted or updated.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteIsDeletedLocalNotExists">
            <summary>
            The Remote datasource has deleted a row that does not exists in the Local datasource 
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ErrorResolution">
            <summary>
            Determines what kind of action should be taken when an error is raised from the datasource
            during an insert / update or delete command
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.Throw">
            <summary>
            Throw the error. Default value.Transaction is rollbacked
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.ContinueOnError">
            <summary>
            Ignore the error and continue to sync. Error will be stored 
            locally in a separate batch info file
            <para>
            Row is stored locally with a state of <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyDeletedFailed"/> 
            or <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyModifiedFailed"/> depending on the row state.
            </para>
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.RetryOneMoreTimeAndThrowOnError">
            <summary>
            Will try one more time once after all the others rows in the table. 
            <para>
            If the error is raised again, an exception is thrown and transaction is rollback
            </para>
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.RetryOneMoreTimeAndContinueOnError">
            <summary>
            Will try one more time once after all the others rows in the table. 
            <para>
            If the error is raised again, Sync continues normally and error will be stored locally in a 
            separate batch info file with a state of <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyDeletedFailed"/> 
            or <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyModifiedFailed"/> depending on the row state.
            </para>
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.RetryOnNextSync">
            <summary>
            Row is stored locally and will be applied again on next sync. Sync continues normally and 
            row is stored locally with a state of <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.RetryDeletedOnNextSync"/> 
            or <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.RetryModifiedOnNextSync"/> depending on the row state.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.Resolved">
            <summary>
            Considers the row as applied.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncDirection">
            <summary>
            Sync direction : Can be Bidirectional (default), DownloadOnly, UploadOnly
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.Bidirectional">
            <summary>
            Table will be sync from server to client and from client to server
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.DownloadOnly">
            <summary>
            Table will be sync from server to client only.
            All changes occured client won't be uploaded to server
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.UploadOnly">
            <summary>
            Table will be sync from client to server only
            All changes from server won't be downloaded to client
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.None">
            <summary>
            Table structure is replicated, but not the datas
            Note : The value should be 0, but for compatibility issue with previous version, we go for a new value
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncWay.None">
            <summary>
            No sync engaged
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncWay.Download">
            <summary>
            Sync is selecting then downloading changes from server
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncWay.Upload">
            <summary>
            Sync is selecting then uploading changes from client
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncMode">
            <summary>
            Basic mode : Reading (no transaction) or Writing (with transaction)
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.Normal">
            <summary>
            Normal synchronization
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.Reinitialize">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.ReinitializeWithUpload">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client, after trying a client upload
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.DropAllAndSync">
            <summary>
            Drop all the sync metadatas even tracking tables and scope infos and make a full sync again
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.DropAllAndExit">
            <summary>
            Drop all the sync metadatas even tracking tables and scope infos and exit
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.DeprovisionAndSync">
            <summary>
            Deprovision stored procedures and triggers and sync again
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.AbortSync">
            <summary>
            Exit a Sync session without syncing
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Sql">
            <summary>
            Progress that contain the most detailed messages and the Sql statement executed
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Trace">
            <summary>
            Progress that contain the most detailed messages. These messages may contain sensitive application data
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Debug">
            <summary>
            Progress that are used for interactive investigation during development
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Information">
            <summary>
            Progress that track the general flow of the application. 
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.None">
            <summary>
            Specifies that a progress output should not write any messages.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncProvision">
            <summary>
            Gets the objects we want to provision or deprovision
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncRowState">
            <summary>
            Gets the state of a SyncRow object.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.None">
            <summary>
            The row has no state yet
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.Deleted">
            <summary>
            The row is mark as deleted
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.Modified">
            <summary>
            The row is mark as modified (update or insert)
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.RetryDeletedOnNextSync">
            <summary>
            The row is mark as to be retry on next sync as a deleted row
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.RetryModifiedOnNextSync">
            <summary>
            The row is mark as to be retry on next sync as a modified row
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyDeletedFailed">
            <summary>
            The row is mark as failed on apply as deleted
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyModifiedFailed">
            <summary>
            The row is mark as failed on apply as modified
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncSessionState">
            <summary>
            Defines the state that a synchronization session is in.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncSessionState.Ready">
            <summary>
            The session is ready to synchronize changes.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncSessionState.Synchronizing">
            <summary>
            The session is currently synchronizing changes.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncStage">
            <summary>
            Sync progress step. Used for the user feedback
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncType">
            <summary>
            Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncType.Normal">
            <summary>
            Normal synchronization
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncType.Reinitialize">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncType.ReinitializeWithUpload">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client, after trying a client upload
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.TransactionMode.AllOrNothing">
            <summary>
            Default mode for transaction, when applying changes
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.TransactionMode.PerBatch">
            <summary>
            Each batch file will have its own transaction
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.TransactionMode.None">
            <summary>
            No transaction during applying changes. very risky
            </summary>
        </member>
        <member name="T:Dotmim.Sync.IGuardClause">
            <summary>
            Simple interface to provide a generic mechanism to build guard clause extension methods from.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Guard.Against">
            <summary>
            An entry point to a set of Guard Clauses.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.GuardClauseExtensions">
            <summary>
            A collection of common guard clauses, implemented as extensions.
            </summary>
            <example>
            Guard.Against.Null(input, nameof(input));
            </example>
        </member>
        <member name="M:Dotmim.Sync.GuardClauseExtensions.Null``1(Dotmim.Sync.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.GuardClauseExtensions.NullOrEmpty(Dotmim.Sync.IGuardClause,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.GuardClauseExtensions.NullOrEmpty(Dotmim.Sync.IGuardClause,System.Nullable{System.Guid},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null equals to Guid.Empty.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.GuardClauseExtensions.NullOrEmpty``1(Dotmim.Sync.IGuardClause,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null or enumerable is empty.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.GuardClauseExtensions.NullOrWhiteSpace(Dotmim.Sync.IGuardClause,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null or empty or whitespace.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.GuardClauseExtensions.Default``1(Dotmim.Sync.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is equals to Default.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HashAlgorithm">
            <summary>
            Calculate a hash for each BatchInfo
            Original source code from @gentledepp
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HashAlgorithm.SHA256">
            <summary>
            Create a hash with SHA256
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Interceptors">
            <summary>
            Manage all On[Method]s
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.GetInterceptors``1">
            <summary>
            Get all interceptors of T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.HasInterceptors``1">
            <summary>
            Returns a boolean value indicating if we have any interceptors for the current type T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Clear``1">
            <summary>
            Remove all interceptors based on type of ProgressArgs
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Clear">
            <summary>
            Remove all interceptors 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Clear(System.Guid)">
            <summary>
            Remove interceptor based on Id
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Add``1(System.Action{``0})">
            <summary>
            Add an interceptor of T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Add``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Add an async interceptor of T
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InterceptorWrapper`1">
            <summary>
            Encapsulate 1 func to intercept one event
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.#ctor">
            <summary>
            Create a new empty interceptor
            </summary>
        </member>
        <member name="P:Dotmim.Sync.InterceptorWrapper`1.IsEmpty">
            <summary>
            Gets a boolean indicating if the interceptor is not used by user (ie : is Empty)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.InterceptorWrapper`1.Id">
            <summary>
            Interceptor Id
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.Set(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Set a Func as interceptor
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.Set(System.Action{`0})">
            <summary>
            Set an Action as interceptor
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.RunAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Run the Action or Func as the Interceptor
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SynchronousProgress`1">
            <summary>
            Provides an IProgress{T} that invokes callbacks for each reported progress value.
            </summary>
            <typeparam name="T">Specifies the type of the progress report value.</typeparam>
            <remarks>
            Any handler provided to the constructor or event handlers registered with
            the <see cref="E:Dotmim.Sync.SynchronousProgress`1.ProgressChanged"/> event are invoked through a 
            <see cref="T:System.Threading.SynchronizationContext"/> instance captured
            when the instance is constructed.  If there is no current SynchronizationContext
            at the time of construction, the callbacks will be invoked on the ThreadPool.
            </remarks>
        </member>
        <member name="F:Dotmim.Sync.SynchronousProgress`1.m_synchronizationContext">
            <summary>The synchronization context captured upon construction.  This will never be null.</summary>
        </member>
        <member name="F:Dotmim.Sync.SynchronousProgress`1.m_handler">
            <summary>The handler specified to the constructor.  This may be null.</summary>
        </member>
        <member name="F:Dotmim.Sync.SynchronousProgress`1.m_invokeHandlers">
            <summary>A cached delegate used to post invocation to the synchronization context.</summary>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.#ctor">
            <summary>Initializes the <see cref="T:System.Progress`1"/>.</summary>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.#ctor(System.Action{`0})">
            <summary>Initializes the <see cref="T:System.Progress`1"/> with the specified callback.</summary>
            <param name="handler">
            A handler to invoke for each reported progress value.  This handler will be invoked
            in addition to any delegates registered with the <see cref="E:Dotmim.Sync.SynchronousProgress`1.ProgressChanged"/> event.
            Depending on the <see cref="T:System.Threading.SynchronizationContext"/> instance captured by 
            could be invoked concurrently with itself.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="E:Dotmim.Sync.SynchronousProgress`1.ProgressChanged">
            <summary>Raised for each reported progress value.</summary>
            <remarks>
            Handlers registered with this event will be invoked on the 
            <see cref="T:System.Threading.SynchronizationContext"/> captured when the instance was constructed.
            </remarks>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.OnReport(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.System#IProgress{T}#Report(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.InvokeHandlers(System.Object)">
            <summary>Invokes the action and event callbacks.</summary>
            <param name="state">The progress value.</param>
        </member>
        <member name="T:Dotmim.Sync.ProgressStatics">
            <summary>Holds static values for <see cref="T:System.Progress`1"/>.</summary>
            <remarks>This avoids one static instance per type T.</remarks>
        </member>
        <member name="F:Dotmim.Sync.ProgressStatics.DefaultContext">
            <summary>A default synchronization context that targets the ThreadPool.</summary>
        </member>
        <member name="T:Dotmim.Sync.SyncLogger">
            <summary>
            Default logger used in Dotmim.Sync
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLogger.MinimumLevel">
            <summary>
            Gets a value indicating the mimimum LogLevel value
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.AddConsole">
            <summary>
            Adds an output to console when logging something
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.AddDebug">
            <summary>
            Adds an output to diagnostics debug window when logging something
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Adds minimum level : 0 Trace, 1 Debug, 2 Information, 3, Warning, 4 Error, 5 Critical, 6 None
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Gets if the logger can log something, according to the minimum log level parameterized
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Log to all output writers configured
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.Write(Dotmim.Sync.OutputWriter,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Write a messages without returning to new line
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.WriteLine(Dotmim.Sync.OutputWriter,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Write a messages and returns to new line
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerFactoryExtensions.AddSyncLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Dotmim.Sync.SyncLoggerOptions})">
            <summary>
            Add SyncLogger to the logging pipeline.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerOptions.AddConsole">
            <summary>
            Adds an output to console when logging something
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerOptions.AddDebug">
            <summary>
            Adds an output to diagnostics debug window when logging something
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerOptions.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Adds minimum level : 0 Trace, 1 Debug, 2 Information, 3, Warning, 4 Error, 5 Critical, 6 None
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLoggerProvider.ConfigureOptions">
            <summary>
            Get default logger options
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLoggerProvider.ConfigureSyncOptions">
            <summary>
            Get Sync logger options
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerProvider.#ctor(Microsoft.Extensions.Options.IConfigureOptions{Microsoft.Extensions.Logging.LoggerFilterOptions},Microsoft.Extensions.Options.IConfigureOptions{Dotmim.Sync.SyncLoggerOptions})">
            <summary>
            Get a sync logger provider. Options can come from both LoggerFilterOptions or from typed SyncLoggerOptions
            </summary>
            <param name="options"></param>
            <param name="syncOptions"></param>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsValid(Dotmim.Sync.SyncColumn)">
            <summary>
            Validate if a column definition is actualy supported by the provider
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetMaxLength(Dotmim.Sync.SyncColumn)">
            <summary>
            Gets and validate a max length issued from the database definition
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetOwnerDbType(Dotmim.Sync.SyncColumn)">
            <summary>
            Get the native datastore DbType (that's why we return object instead of SqlDbType or SqliteDbType or MySqlDbType)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetDbType(Dotmim.Sync.SyncColumn)">
            <summary>
            Get a DbType from a datastore type name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsReadonly(Dotmim.Sync.SyncColumn)">
            <summary>
            Validate if a column is readonly or not
            </summary>
            <param name="columnDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsNumericType(Dotmim.Sync.SyncColumn)">
            <summary>
            Check if a type name is a numeric type
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsSupportingScale(Dotmim.Sync.SyncColumn)">
            <summary>
            Check if a type name support scale
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetPrecisionAndScale(Dotmim.Sync.SyncColumn)">
            <summary>
            Get precision and scale from a SchemaColumn
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetPrecision(Dotmim.Sync.SyncColumn)">
            <summary>
            Get precision if supported (MySql supports int(10))
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetType(Dotmim.Sync.SyncColumn)">
            <summary>
            Get a managed type from a datastore dbType
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Manager.DbRelationDefinition">
            <summary>
            Relation definition from the datastore.
            This class is used only when retrieving the relation definition from the datastore
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Manager.DbRelationColumnDefinition">
            <summary>
            Each column from foreign key and reference key, with the order used
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesApplied">
            <summary>
            All table changes applied on a provider
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesApplied.#ctor">
            <summary>
            ctor for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TableChangesApplied">
            <summary>
            Get the view to be applied 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TotalResolvedConflicts">
            <summary>
            Gets the total number of conflicts that have been applied resolved during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TotalAppliedChanges">
            <summary>
            Gets the total number of changes that have been applied during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TotalAppliedChangesFailed">
            <summary>
            Gets the total number of changes that have failed to be applied during the synchronization session.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesSelected">
            <summary>
            All tables changes selected
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TableChangesSelected">
            <summary>
            Get the changes selected to be applied for a current table
            </summary> 
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TotalChangesSelected">
            <summary>
            Gets the total number of changes that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TotalChangesSelectedDeletes">
            <summary>
            Gets the total number of deletes that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TotalChangesSelectedUpdates">
            <summary>
            Gets the total number of updates OR inserts that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseMetadatasCleaned">
            <summary>
            Get the rows count cleaned for all tables, during a DeleteMetadatasAsync call
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseMetadatasCleaned.Tables">
            <summary>
            Get the changes selected to be applied for a current table
            </summary> 
        </member>
        <member name="P:Dotmim.Sync.DatabaseMetadatasCleaned.RowsCleanedCount">
            <summary>
            Gets the total number of rows cleaned
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseMetadatasCleaned.TimestampLimit">
            <summary>
            Gets or Sets the last timestamp used as the limit to clean the table metadatas. All rows below this limit have beed cleaned.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MessageApplyChanges">
            <summary>
            Message exchanged during the Begin session sync stage
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MessageApplyChanges.#ctor(System.Guid,System.Guid,System.Boolean,System.Nullable{System.Int64},Dotmim.Sync.SyncSet,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Boolean,System.String,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncSet,Dotmim.Sync.DatabaseChangesApplied)">
            <summary>
            Applying changes message.
            Be careful policy could be differente from the schema (especially on client side, it's the reverse one, by default)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.LocalScopeId">
            <summary>
            Gets the local Scope Id
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.SenderScopeId">
            <summary>
            Gets the sender Scope Id
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.IsNew">
            <summary>
            Gets if the sync is a first sync. In this case, the last sync timestamp is ignored
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.LastTimestamp">
            <summary>
            Gets the Last timestamp used to compare rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.Schema">
            <summary>
            Gets or Sets the schema used for this sync
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.Policy">
            <summary>
            Gets or Sets the current Conflict resolution policy
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.Changes">
            <summary>
            Gets or Sets the batch info containing the changes to apply
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.FailedRows">
            <summary>
            Gets or Sets the failed rows set
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.ChangesApplied">
            <summary>
            Gets or Sets the changes applied
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.SnapshoteApplied">
            <summary>
            Gets or Sets if we have already applied a snapshot. So far, we don't reset the tables, even if we are in reinit mode.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.BatchDirectory">
            <summary>
            Gets the batch directory
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesApplied">
            <summary>
            Summary of table changes applied on a source
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesApplied.#ctor">
            <summary>
            ctor for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.State">
            <summary>
            Gets the RowState of the applied rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.ResolvedConflicts">
            <summary>
            Gets the resolved conflict rows applied count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.Applied">
            <summary>
            Gets the rows changes applied count. This count contains resolved conflicts count also
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.Failed">
            <summary>
            Gets the rows changes failed count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.TotalRowsCount">
            <summary>
            Gets the total rows count to apply for all tables (used for progress during sync)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.TotalAppliedCount">
            <summary>
            Gets the total rows count already applied for all tables (used for progress during sync)
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesSelected">
            <summary>
            Get changes to be applied (contains Deletes AND Inserts AND Updates)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesSelected.#ctor">
            <summary>
            Ctor for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.TableName">
            <summary>
            Gets the table name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.Deletes">
            <summary>
            Gets or sets the number of deletes that should be applied to a table during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.Upserts">
            <summary>
            Gets or sets the number of updates OR inserts that should be applied to a table during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.TotalChanges">
            <summary>
            Gets the total number of changes that are applied to a table during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.HasBeenResolved">
            <summary>
            Gets or Sets result of conflict resolution.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.HasBeenMarkForNextSync">
            <summary>
            Gets or Sets a row to be mark for next sync again
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.HasBeenApplied">
            <summary>
            Gets or Sets a boolean indicating if the conflict resolution has been applied locally
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.Exception">
            <summary>
            Gets or Sets the Exception if an error occured during conflict resolution
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.Row">
            <summary>
            Gets or Sets the row in error / conflict
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.TimestampLimit">
            <summary>
            Gets or Sets the last timestamp used as the limit to clean the table metadatas. All rows below this limit have beed cleaned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableMetadatasCleaned.#ctor(System.String,System.String)">
            <summary>
            Createa new instance of a summary of metadatas cleaned for one table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.RowsCleanedCount">
            <summary>
            Gets or Sets the metadatas rows count, that have been cleaned
            </summary>
        </member>
        <member name="T:Dotmim.Sync.BaseOrchestrator">
            <summary>
            Based Orchestrator class. Don't use it as is. Prefer use <see cref="T:Dotmim.Sync.LocalOrchestrator"/>, <see cref="T:Dotmim.Sync.RemoteOrchestrator"/> or <c>WebRemoteOrchestrator</c> 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.MessageApplyChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply changes : Delete / Insert / Update
            the fromScope is local client scope when this method is called from server
            the fromScope is server scope when this method is called from client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyTableChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.MessageApplyChanges,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.DatabaseChangesApplied,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply changes internal method for one type of query: Insert, Update or Delete for every batch from a table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyDeleteAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply a delete on a row. if forceWrite, force the delete
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyUpdateAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply a single update in the current datasource. if forceWrite, force the update
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadBatchInfos">
            <summary>
            Load all batch infos from the batch directory (see <see cref="P:Dotmim.Sync.SyncOptions.BatchDirectory"/>)
            <example>
            <code>
            var batchInfos = agent.LocalOrchestrator.LoadBatchInfos();
            
            foreach (var batchInfo in batchInfos)
                Console.WriteLine(batchInfo.RowsCount);
            </code>
            </example>
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTablesFromBatchInfo(Dotmim.Sync.Batch.BatchInfo,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.LoadTablesFromBatchInfo(System.String,Dotmim.Sync.Batch.BatchInfo,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTablesFromBatchInfo(System.String,Dotmim.Sync.Batch.BatchInfo,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
             <summary>
             Load all tables from a batch info. All rows serialized on disk are loaded in memory once you are iterating
             
             <code>
             var batchInfos = await agent.LocalOrchestrator.LoadBatchInfos();
             foreach (var batchInfo in batchInfos)
             {
                // Load all rows from error tables specifying the specific SyncRowState states
                var allTables = agent.LocalOrchestrator.LoadTablesFromBatchInfo(batchInfo, SyncRowState.ApplyDeletedFailed | SyncRowState.ApplyModifiedFailed);
            
                // Enumerate all rows in error
                foreach (var table in allTables)
                  foreach (var row in table.Rows)
                    Console.WriteLine(row);
             }
             </code>   
             </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchInfo(System.String,Dotmim.Sync.Batch.BatchInfo,System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
            <summary>
            Load a table with all rows from a <see cref="T:Dotmim.Sync.Batch.BatchInfo"/> instance. You need a <see cref="T:Dotmim.Sync.ScopeInfoClient"/> instance to be able to load rows for this client.
            <para>
            Once loaded, all rows are in memory.
            </para>
            <example>
            <code>
            // get the local client scope info
            var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
            // get all changes from server
            var changes = await remoteOrchestrator.GetChangesAsync(cScopeInfoClient);
            // load changes for table ProductCategory in memory
            var productCategoryTable = await localOrchestrator.LoadBatchInfo(scopeName, changes, "ProductCategory")
            foreach (var productCategoryRow in productCategoryTable.Rows)
            {
               ....
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchPartInfo(System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Load a table from a batch part info
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchPartInfo(System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Load a table from a batch part info
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadTableFromBatchPartInfo(Dotmim.Sync.SyncContext,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Load the Batch part info in memory, in a SyncTable
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveTableToBatchPartInfoAsync(Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)">
            <summary>
            Save a batch part info containing all rows from a sync table
            </summary>
            <param name="batchInfo">Represents the directory containing all batch parts and the schema associated</param>
            <param name="batchPartInfo">Represents the table to serialize in a batch part</param>
            <param name="syncTable">The table to serialize</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveTableToBatchPartInfoAsync(System.String,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.SaveTableToBatchPartInfoAsync(Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.HandleConflictAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Guid,System.Guid,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Handle a conflict
            The int returned is the conflict count I need 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetConflictResolutionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Guid,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Guid,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            A conflict has occured, we try to ask for the solution to the user
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetConflict(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncRow)">
            <summary>
            We have a conflict, try to get the source row and generate a conflict
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetConflictRowAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.SyncRow,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Try to get a source row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ResetTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Reset a table, deleting all rows from table and tracking_table. This method is used when you want to Reinitialize your database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ResetTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Reset a table, deleting rows from table and tracking_table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DisableConstraintsAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Disable a table's constraints
            <para>
            Usually this method is surrounded by a connection / transaction
            </para>
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            
            using var sqlConnection = new SqlConnection(clientProvider.ConnectionString);
            
            sqlConnection.Open();
            using var sqlTransaction = sqlConnection.BeginTransaction();
            
            var scopeInfo = await localOrchestrator.GetScopeInfoAsync(sqlConnection, sqlTransaction);
            await localOrchestrator.DisableConstraintsAsync(scopeInfo, "ProductCategory", default,
                sqlConnection, sqlTransaction);
            
            // .. Do some random insert in the ProductCategory table
            await DoSomeRandomInsertInProductCategoryTableAsync(sqlConnection, sqlTransaction);
            
            await localOrchestrator.EnableConstraintsAsync(scopeInfo, "ProductCategory", default,
                sqlConnection, sqlTransaction);
            
            sqlTransaction.Commit();
            sqlConnection.Close();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.EnableConstraintsAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Enable a table's constraints
            <para>
            Usually this method is surrounded by a connection / transaction
            </para>
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            
            using var sqlConnection = new SqlConnection(clientProvider.ConnectionString);
            
            sqlConnection.Open();
            using var sqlTransaction = sqlConnection.BeginTransaction();
            
            var scopeInfo = await localOrchestrator.GetScopeInfoAsync(sqlConnection, sqlTransaction);
            await localOrchestrator.DisableConstraintsAsync(scopeInfo, "ProductCategory", default,
                sqlConnection, sqlTransaction);
            
            // .. Do some random insert in the ProductCategory table
            await DoSomeRandomInsertInProductCategoryTableAsync(sqlConnection, sqlTransaction);
            
            await localOrchestrator.EnableConstraintsAsync(scopeInfo, "ProductCategory", default,
                sqlConnection, sqlTransaction);
            
            sqlTransaction.Commit();
            sqlConnection.Close();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDisableConstraintsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Disabling all constraints on synced tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalEnableConstraintsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Enabling all constraints on synced tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalResetTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Reset a table, deleting rows from table and tracking_table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Provider">
            <summary>
            Gets or Sets the provider used by this local orchestrator
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Options">
            <summary>
            Gets the options used by this local orchestrator
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.CompleteTime">
            <summary>
            Gets or Sets the end time for this orchestrator
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Logger">
            <summary>
            Gets or Sets the logger used by this orchestrator
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Create a local orchestrator, used to orchestrates the whole sync on the client side
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.AddInterceptor``1(System.Action{``0})">
            <summary>
            Add an interceptor of T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.AddInterceptor``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Add an async interceptor of T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ClearInterceptors``1">
            <summary>
            Remove all interceptors based on type of ProgressArgs
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ClearInterceptors">
            <summary>
            Remove all interceptors 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ClearInterceptors(System.Guid)">
            <summary>
            Remove interceptor based on Id
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.HasInterceptors``1">
            <summary>
            Returns a boolean value indicating if we have any interceptors for the current type T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InterceptAsync``1(``0,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Try to proc a On[Method]
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ReportProgress(Dotmim.Sync.SyncContext,System.IProgress{Dotmim.Sync.ProgressArgs},Dotmim.Sync.ProgressArgs,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Try to report progress
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.OpenConnectionAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Open a connection
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CloseConnectionAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Close a connection
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSyncAdapter(System.String,Dotmim.Sync.SyncTable,Dotmim.Sync.SyncSetup)">
            <summary>
            Get the provider sync adapter
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetTableBuilder(Dotmim.Sync.SyncTable,Dotmim.Sync.ScopeInfo)">
            <summary>
            Get the provider table builder
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetScopeBuilder(System.String)">
            <summary>
            Get a provider scope builder by scope table name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalIsOutDatedAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.ScopeInfo,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Check if the orchestrator database is outdated
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetHelloAsync">
            <summary>
            Check if a database exists, regarding the provider you are using. Returns database name and database version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetHelloAsync(System.String)">
            <summary>
            Check if a database exists, regarding the provider you are using. Returns database name and database version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetHelloAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get hello from database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSnapshotDirectoryAsync(Dotmim.Sync.SyncParameters,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get a snapshot root directory name and folder directory name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSnapshotDirectoryAsync(System.String,Dotmim.Sync.SyncParameters,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get a snapshot root directory name and folder directory name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCanCleanFolderAsync(System.String,Dotmim.Sync.SyncParameters,Dotmim.Sync.Batch.BatchInfo,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal routine to clean tmp folders. MUST be compare also with Options.CleanFolder
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetSnapshotDirectoryPathAsync(System.String,Dotmim.Sync.SyncParameters,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal routine to get the snapshot root directory and batch directory name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ToString">
            <summary>
            Gets the inner provider if any
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.HandleErrorAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncRow,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.SyncTable,System.Exception,System.Guid,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Handle a conflict
            The int returned is the conflict count I need 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSchemaAsync(System.String,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Read the schema stored from the orchestrator database, through the provider.
            <example>
            Example:
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
             var setup = new SyncSetup("ProductCategory", "Product");
             var schema = await remoteOrchestrator.GetSchemaAsync(scopeName, setup);
            </code>
            </example>
            </summary>
            <returns>Schema containing tables, columns, relations, primary keys</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSchemaAsync(Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.GetSchemaAsync(System.String,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetAllTablesAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Read all tables from database. Don't need a setup to get tables. This method returns all tables whatever they are tracked or not.
            <example>
            Example:
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
             var setup = await remoteOrchestrator.GetAllTablesAsync()
            </code>
            </example>
            </summary>
            <returns>SyncSetup containing tables names and column names</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetSchemaAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            update configuration object with tables desc from server database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetAllTablesAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get all tables with column names from database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.FillSyncTableWithColumns(Dotmim.Sync.SyncContext,Dotmim.Sync.SetupTable,Dotmim.Sync.SyncTable,System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncColumn})">
            <summary>
            Generate the DmTable configuration from a given columns list
            Validate that all columns are currently supported by the provider
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SetPrimaryKeysAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check then add primary keys to schema table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SetRelations(Dotmim.Sync.SyncContext,System.Collections.Generic.List{Dotmim.Sync.Manager.DbRelationDefinition},Dotmim.Sync.SyncSet)">
            <summary>
            For all relations founded, create the SyncRelation and add it to schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetLocalTimestampAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get the last timestamp from the orchestrator database
            <example>
            Example:
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
             var ts = await remoteOrchestrator.GetLocalTimestampAsync()
            </code>
            </example>        
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetLocalTimestampAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.GetLocalTimestampAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetLocalTimestampAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Read a scope info
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateStoredProcedureAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbStoredProcedureType,System.Boolean)">
            <summary>
            Create a <strong>Stored Procedure</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateStoredProcedureAsync(scopeInfo, "Employee", null, DbStoredProcedureType.SelectChanges);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="storedProcedureType">Stored Procedure type. See <see cref="T:Dotmim.Sync.Builders.DbStoredProcedureType"/> enumeration.</param>
            <param name="overwrite">If specified the stored procedure is generated again, even if already exists.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateStoredProceduresAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean)">
            <summary>
            Create all <strong>Stored Procedures</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateStoredProceduresAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified all the stored procedures are generated again, even if they already exist.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistStoredProcedureAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbStoredProcedureType)">
            <summary>
            Check if a <strong>Stored Procedure</strong>, for a given table, exists.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.ExistStoredProcedureAsync(scopeInfo, "Employee", null, DbStoredProcedureType.SelectChanges);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="storedProcedureType">Stored Procedure type. See <see cref="T:Dotmim.Sync.Builders.DbStoredProcedureType"/> enumeration.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropStoredProcedureAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbStoredProcedureType)">
            <summary>
            Drop a <strong>Stored Procedure</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropStoredProcedureAsync(scopeInfo, "Employee", null, DbStoredProcedureType.SelectChanges);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="storedProcedureType">Stored Procedure type. See <see cref="T:Dotmim.Sync.Builders.DbStoredProcedureType"/> enumeration.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropStoredProceduresAsync(Dotmim.Sync.ScopeInfo,System.String,System.String)">
            <summary>
            Drop all <strong>Stored Procedures</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropStoredProceduresAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>       
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateStoredProcedureAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create Stored Procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropStoredProcedureAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop storedProcedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsStoredProcedureAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists storedProcedure procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropStoredProceduresAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop storedProcedures routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateStoredProceduresAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create storedProcedures routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean)">
            <summary>
            Create a <strong>Table</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified the table is dropped, if exists, then created.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTablesAsync(Dotmim.Sync.ScopeInfo,System.Boolean)">
            <summary>
            Create all <strong>Tables</strong> present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="overwrite">If specified all tables are dropped, if exists, then created.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String)">
            <summary>
            Check if <strong>Table</strong> exists, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.ExistTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String)">
            <summary>
            Drop a <strong>Table</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.DropTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTablesAsync(Dotmim.Sync.ScopeInfo)">
            <summary>
            Drop all <strong>Tables</strong> present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalAddColumnAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal add column routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropColumnAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal add column routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateSchemaAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists table procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsSchemaAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists schema procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsColumnAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists column procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTrackingTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a <strong>Tracking Table</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTrackingTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified the tracking table is dropped, if exists, then created.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistTrackingTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a <strong>Tracking Table</strong> exists, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.ExistTrackingTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTrackingTablesAsync(Dotmim.Sync.ScopeInfo,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create ALL <strong>Tracking Tables</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTrackingTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="overwrite">If specified the tracking table is dropped, if exists, then created.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTrackingTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop a tracking table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTrackingTablesAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop all <strong>Tracking Tables</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTrackingTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create tracking table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalRenameTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.ParserName,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal rename tracking table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop tracking table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists tracking table procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTriggerAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbTriggerType,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a <strong>Trigger</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTriggerAsync(scopeInfo, "Employee", DbTriggerType.Insert);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="triggerType">Trigger type to create</param>
            <param name="overwrite">If specified the trigger is dropped, if exists, then created again.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTriggersAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create all <strong>Triggers</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTriggersAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified the triggers are dropped, if exists, then created again.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistTriggerAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a <strong>Trigger</strong>exists, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.ExistTriggerAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="triggerType">Trigger type to check if exist</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTriggerAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop a <strong>Trigger</strong>, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTriggerAsync(scopeInfo, "Employee", null, DbTriggerType.Insert);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="triggerType">Trigger type to drop</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTriggersAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop all <strong>Triggers</strong>, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTriggersAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTriggerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create trigger routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTriggersAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create triggers routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTriggerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop trigger routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTriggersAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop triggers routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsTriggerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists trigger procedure routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetCommandAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.DbSyncAdapter,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get the command from provider, check connection is opened, affect connection and transaction
            Prepare the command parameters and add scope parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetCommandParametersValues(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,Dotmim.Sync.DbSyncAdapter,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs},Dotmim.Sync.SyncRow,System.Nullable{System.Guid},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Set command parameters value mapped to Row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.RemoveCommands">
            <summary>
            Remove a Command from internal shared dictionary
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateChangesTable(Dotmim.Sync.SyncTable,Dotmim.Sync.SyncSet)">
            <summary>
            Create a change table with scope columns and tombstone column
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectChangesParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the GetChanges stored procedure parameters, with Filter or without filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectInitializeChangesParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the Initialize stored procedure parameters, with Filter or without filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetUpsertsParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the Upserts stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectRowParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the SelectRow stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetDeleteRowParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the DeleteRow stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetDeleteMetadataParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the DeleteMetadata stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetUpdateMetadataParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the UpdateMetadata stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectMetadataParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the SelectMetadata stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetResetParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the SelectMetadata stored procedure parameters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,Dotmim.Sync.Batch.BatchInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Gets a batch of changes to synchronize when given batch size, 
            destination knowledge, and change data retriever parameters.
            </summary>
            <returns>A DbSyncContext object that will be used to retrieve the modified data.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetEstimatedChangesCountAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Gets changes rows count estimation, 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetSelectChangesCommandAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get the correct Select changes command 
            Can be either
            - SelectInitializedChanges              : All changes for first sync
            - SelectChanges                         : All changes filtered by timestamp
            - SelectInitializedChangesWithFilters   : All changes for first sync with filters
            - SelectChangesWithFilters              : All changes filtered by timestamp with filters
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateSyncRowFromReader(Dotmim.Sync.SyncContext,System.Data.IDataReader,Dotmim.Sync.SyncTable)">
            <summary>
            Create a new SyncRow from a dataReader.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.EnsureLastBatchInfo(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.IEnumerable{Dotmim.Sync.Batch.BatchPartInfo},System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncTable})">
            <summary>
            Ensure we have a correct order for last batch in batch part infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalUpdateMetadatasAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Update a metadata row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetAllScopeInfoClientsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all scopes info clients instances
            <example>
            This code gets the min last sync timestamp
            <code>
            var cAllScopeInfoClients = await agent.LocalOrchestrator.GetAllScopeInfoClientsAsync();
            
            var minServerTimeStamp = cAllScopeInfoClients.Min(sic => sic.LastServerSyncTimestamp);
            var minClientTimeStamp = cAllScopeInfoClients.Min(sic => sic.LastSyncTimestamp);
            var minLastSync = cAllScopeInfoClients.Min(sic => sic.LastSync);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveScopeInfoClientAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Save a <see cref="T:Dotmim.Sync.ScopeInfoClient"/> instance to the local data source.
            <example>
            <code>
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync();
             
             if (cScopeInfoClient.IsNewScope)
             {
               cScopeInfoClient.IsNewScope = false;
               cScopeInfoClient.LastSync = DateTime.Now;
               cScopeInfoClient.LastSyncTimestamp = 0;
               cScopeInfoClient.LastServerSyncTimestamp = 0;
             
               await agent.LocalOrchestrator.SaveScopeInfoClientAsync(cScopeInfoClient);
             }
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfoClient"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsScopeInfoClientAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal Sxists Scope Info Client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadScopeInfoClientAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal load a scope info client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadAllScopeInfoClientsAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal load all client histories scopes
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSaveScopeInfoClientAsync(Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal upsert scope info client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateScopeInfoClient(System.String,Dotmim.Sync.SyncParameters)">
            <summary>
            Create an instance of scope info client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetAllScopeInfosAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all scope infos from a data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
            <para>
            If the <strong>scope_info</strong> table is not existing, it will be created.
            </para>
            <example>
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var scopeInfo = await localOrchestrator.GetAllScopeInfosAsync();
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveScopeInfoAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Save a <see cref="T:Dotmim.Sync.ScopeInfo"/> instance to the local data source.
            <example>
            <code>
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync();
             scopeInfo.Setup = setup;
             scopeInfo.Schema = schema;
             scopeInfo.ScopeName = "v1";
             await localOrchestrator.SaveScopeInfoAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DeleteScopeInfoAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete a <see cref="T:Dotmim.Sync.ScopeInfo"/> instance to the local data source.
            <example>
            <code>
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync("v0");
             await localOrchestrator.DeleteScopeInfoAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns> 
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetScopeInfoAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal load a ScopeInfo by scope name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadScopeInfoAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal load a scope by scope name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsScopeInfoAsync(System.String,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists scope
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadAllScopeInfosAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal load all scopes. scopeName arg is just here for getting context
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSaveScopeInfoAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal upsert scope info in a scope table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDeleteScopeInfoAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal delete scope info in a scope table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateScopeInfoClientTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a scope_info_client table in the local data source, if not exists
            <example>
            <code>
             await localOrchestrator.CreateScopeInfoClientTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateScopeInfoTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a scope_info table in the local data source, if not exists
            <example>
            <code>
             await localOrchestrator.CreateScopeInfoTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistScopeInfoTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a scope_info table exists in the local data source
            <example>
            <code>
             var exists = await localOrchestrator.ExistScopeInfoTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistScopeInfoClientTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a scope_info_client table exists in the local data source
            <example>
            <code>
             var exists = await localOrchestrator.ExistScopeInfoClientTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsScopeInfoTableAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal exists scope table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropScopeInfoTableAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal drop scope info table routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateScopeInfoTableAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal create scope info table routine
            </summary>
        </member>
        <member name="T:Dotmim.Sync.LocalOrchestrator">
            <summary>
            <para>
            The <c>LocalOrchestrator</c> object allows you to interact with the local datsource, (using a sync provider to access it).
            </para>
            <para>
            Use a <c>LocalOrchestrator</c> object only when you want to interact with a client datasource.
            If you want to interact with your server datasource, consider using a <c>RemoteOrchestrator</c> instead.
            </para>
            <example>
            You can access your <c>LocalOrchestrator</c> instance from your <see cref="T:Dotmim.Sync.SyncAgent"/>:
            <code>
            var syncAgent = new SyncAgent(clientProvider, serverProvider, options);
            var localOrchestrator = syncAgent.LocalOrchestrator;
            </code>
            You can also create an instance, without using a <see cref="T:Dotmim.Sync.SyncAgent"/>:
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider, options);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalApplyChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,Dotmim.Sync.ServerSyncChanges,Dotmim.Sync.ClientSyncChanges,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply changes locally
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalApplySnapshotAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,Dotmim.Sync.ServerSyncChanges,Dotmim.Sync.ClientSyncChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply a snapshot locally
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetChangesAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get changes from <strong>client</strong> datasource to be send to the <strong>server</strong>.
            <para>
            You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info) 
            to be able to get changes from your local datasource.
            </para>
            <example>
            Example:
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
             var changes = await localOrchestrator.GetChangesAsync(cScopeInfoClient);
            </code>
            </example>
            </summary>
            <returns>
            Returns a <see cref="T:Dotmim.Sync.ClientSyncChanges"/> instance.
            <para>
            All changes are serialized on disk and can be load in memory from the <c>ClientBatchInfo</c> property (of type <see cref="T:Dotmim.Sync.Batch.BatchInfo"/>)
            </para>
            <example>
            You can load in memory the changes using the <c>LoadTableFromBatchInfoAsync()</c> method:
            <code>
            var productCategoryTable = await localOrchestrator.LoadTableFromBatchInfoAsync(
                scopeName, changes.ClientBatchInfo, "ProductCategory");
                
            foreach (var productCategoryRow in productCategoryTable.Rows)
            {
               ....
            }
            </code>
            </example>
            </returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetEstimatedChangesCountAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get <strong>an estimation count</strong> of the changes from <strong>client</strong> datasource to be send to the <strong>server</strong>.
            <para>
            You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info) 
            to be able to get the estimation count of the changes from your local datasource.
            </para>
            <example>
            Example:
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
             var estimatedChanges = await localOrchestrator.GetEstimatedChangesCountAsync(cScopeInfoClient);
            </code>
            </example>
            </summary>
            <returns>
            Returns a <see cref="T:Dotmim.Sync.ClientSyncChanges"/> instance.
            <para>
            No changes are downloaded, so far the <c>ClientBatchInfo</c> property is always <c>null</c>.
            </para>
            The propery <c>ClientChangesSelected</c> (of type <see cref="T:Dotmim.Sync.DatabaseChangesSelected"/>) 
            contains an estimation count of the changes from your local datsource for
            all the tables from your setup.
            </returns>        
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalGetChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get changes from local database from a specific scope you already fetched from local database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Create a local orchestrator, used to orchestrate the whole sync on the client side
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.#ctor(Dotmim.Sync.CoreProvider)">
            <summary>
            Create a local orchestrator, used to orchestrate the whole sync on the client side
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.BeginSessionAsync(System.String,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when a new synchronization session has started. Initialize the SyncContext instance, used for this session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.EndSessionAsync(Dotmim.Sync.SyncResult,System.String,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when the synchronization session is over.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalBeginSessionAsync(Dotmim.Sync.SyncContext,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when a session is starting
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalEndSessionAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncResult,Dotmim.Sync.ClientSyncChanges,Dotmim.Sync.SyncException,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when the sync is over
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.UpdateUntrackedRowsAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Update all untracked rows from the client database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.UpdateUntrackedRowsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Update all untracked rows from the client database
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalUpdateUntrackedRowsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Internal update untracked rows routine
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeleteMetadatasAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete all metadatas from tracking tables, based on min timestamp from scope info client table
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DeleteMetadatasAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeleteMetadatasAsync(System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete all metadatas from tracking tables, based on min timestamp
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DeleteMetadatasAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalDeleteMetadatasAsync(Dotmim.Sync.SyncContext,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Delete metadatas items from tracking tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.ProvisionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Provision a local datasource (<strong>triggers</strong>, <strong>stored procedures</strong> (if supported), <strong>tracking tables</strong> and <strong>tables</strong> if needed. Create also <strong>scope_info</strong> and <strong>scope_info_client</strong> tables.
            <para>
            The <paramref name="provision" /> argument specify the objects to provision. See <see cref="T:Dotmim.Sync.Enumerations.SyncProvision" /> enumeration.
            </para>
            <para>
            The <paramref name="sScopeInfo"/> argument contains the schema to apply and should be retrieved from a <c>scope_info</c> table (most of the time from your server datasource)
            </para>
            <para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var sScopeInfo = await remoteOrchestrator.GetScopeInfoAsync();
            var cScopeInfo = await localOrchestrator.ProvisionAsync(sScopeInfo);
            </code>
            </example>
            </para>
            </summary>
            <param name="sScopeInfo">A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance coming from your server datasource or your client datasource (if exists).</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.Table | SyncProvision.StoredProcedures | SyncProvision.Triggers | SyncProvision.TrackingTable</c> is used.</param>
            <param name="overwrite">If specified, all metadatas are generated and overwritten even if they already exists</param>
            <param name="connection">optional connection</param>
            <param name="transaction">optional transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">optional IProgress of ProgressArgs token</param>
            <returns>
            A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance, saved locally in the client datasource.
            </returns> 
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Deprovision your client datasource.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DeprovisionAsync();
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations
            </remarks>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">optional connection</param>
            <param name="transaction">optional transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">option IProgress{ProgressArgs}</param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})" />
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})" />
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Deprovision your client datasource.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            var setup = new SyncSetup("ProductCategory", "Product");
            await localOrchestrator.DeprovisionAsync(setup);
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations
            </remarks>
            <param name="scopeName">scopeName. If not defined, SyncOptions.DefaultScopeName is used</param>
            <param name="setup">Setup containing tables to deprovision</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">option IProgress{ProgressArgs}</param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DropAllAsync(System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Drop everything related to DMS. Tracking tables, triggers, tracking tables, sync_scope and sync_scope_client tables
            <example>
            Deprovision a client database:
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DropAllAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalProvisionClientAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Provision the local database based on the scope info parameter.
            Scope info parameter should contains Schema and Setup properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoClientAsync(System.String,Dotmim.Sync.SyncParameters,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a Scope Info Client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalEnsureScopeInfoClientAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get the client scope histories
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
            <para>
            If the <strong>scope_info</strong> table is not existing, it will be created. If no scope is found, an empty scope will be created with empty schema and setup properties.
            </para>
            <example>
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync();
             foreach (var schemaTable in scopeInfo.Schema.Tables)
             {
               Console.WriteLine($"Table Name: {schemaTable.TableName}");
                  
               foreach (var column in schemaTable.Columns)
                     Console.WriteLine($"Column Name: {column.ColumnName}");
             }
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalIsConflictingSetupAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Check 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.ManualUpgradeWithFiltersParameterAsync(System.Collections.Generic.List{Dotmim.Sync.ScopeInfoClientUpgrade},System.IProgress{Dotmim.Sync.ProgressArgs},System.Boolean)">
            <summary>
            Upgrade your client database to the last version
            <para>
            This upgrade is manually since <strong>we need the parameters</strong> you are using, to <strong>save them</strong> in the client database.
            Please provide all the entries (scope name + sync parameters) you are using <strong>locally</strong>, to sync to server
            </para>
            <example>
            Here is an example where we are migrating a local datasource where 2 scopes have been already used (1 with filters and the other one without filters)
            <code>
            var entries = new List[ScopeInfoClientUpgrade]();
            var entry = new ScopeInfoClientUpgrade
            {
               Parameters = new SyncParameters(("ProductCategoryId", new Guid("Your_GUID_Filter_Value"))),
               ScopeName = "v1"
            };
            entries.Add(entry);
            entry = new ScopeInfoClientUpgrade {ScopeName = "v2"};
            entries.Add(entry);
            
            var (scopeInfos, scopeInfoClients) = await localOrchestrator.ManualUpgradeWithFiltersParameterAsync(entries, progress, evaluationOnly);
            </code>
            </example>
            </summary>
            <param name="entries">List of all entries you are using locally (an entry is a scope name + syncparameters with value) you are using to sync to server</param>
            <param name="progress">Progress of upgrade</param>
            <param name="evaluateOnly">if set to True, the upgrade will not be applied at the end. Usefull to test your upgrade and see if anything is breaking at some point.</param>
            <returns>
            The new scopeInfos and scopeInfoClients rows from your new upgrade sync config tables
            </returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalApplyThenGetChangesAsync(Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.ClientSyncChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Apply changes on remote provider
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetChangesAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get changes from <strong>server</strong> datasource to be send to a particular <strong>client</strong>.
            <para>
            You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info) from the client side
            to be able to get changes from the server side.
            </para>
            <example>
            Example:
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var remoteOrchestrator = new RemoteOrchestrator(remoteProvider);
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
             // You can load a client scope info from the server database also, if you know the clientId
             // var cScopeInfoClient = await remoteOrchestrator.GetScopeInfoClientAsync(clientId, scopeName, parameters);
             var changes = await remoteOrchestrator.GetChangesAsync(cScopeInfoClient);
            </code>
            </example>
            </summary>
            <returns>
            Returns a <see cref="T:Dotmim.Sync.ServerSyncChanges"/> instance.
            <para>
            All changes are serialized on disk and can be load in memory from the <c>ServerBatchInfo</c> property (of type <see cref="T:Dotmim.Sync.Batch.BatchInfo"/>)
            </para>
            <example>
            You can load in memory the changes using the <c>LoadTableFromBatchInfoAsync()</c> method:
            <code>
            var productCategoryTable = await remoteOrchestrator.LoadTableFromBatchInfoAsync(
                scopeName, changes.ClientBatchInfo, "ProductCategory");
                
            foreach (var productCategoryRow in productCategoryTable.Rows)
            {
               ....
            }
            </code>
            </example>
            </returns>        
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetEstimatedChangesCountAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get <strong>an estimation count</strong> of the changes from <strong>server</strong> datasource to be send to a particular <strong>client</strong>.
            <para>
            You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info) from the client side
            to be able to get changes from the server side.
            </para>
            <example>
            Example:
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var remoteOrchestrator = new RemoteOrchestrator(remoteProvider);
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
             // You can load a client scope info from the server database also, if you know the clientId
             var cScopeInfoClient = await remoteOrchestrator.GetScopeInfoClientAsync(clientId, scopeName, parameters);
             var estimatedChanges = await remoteOrchestrator.GetEstimatedChangesCountAsync(cScopeInfoClient);
            </code>
            </example>
            </summary>
            <returns>
            Returns a <see cref="T:Dotmim.Sync.ServerSyncChanges"/> instance.
            <para>
            No changes are downloaded, so far the <c>ServerBatchInfo</c> property is always <c>null</c>.
            </para>
            The propery <c>ServerChangesSelected</c> (of type <see cref="T:Dotmim.Sync.DatabaseChangesSelected"/>) 
            contains an estimation count of the changes from your server datsource for
            all the tables from your setup.
            </returns>  
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeleteMetadatasAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete all metadatas from tracking tables, based on min timestamp from scope info client table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeleteMetadatasAsync(System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete metadatas items from tracking tables
            </summary>
            <param name="timeStampStart">Timestamp start. Used to limit the delete metadatas rows from now to this timestamp</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalDeleteMetadatasAsync(System.Nullable{System.Int64},Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Delete metadatas items from tracking tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Provision a server datasource (<strong>triggers</strong>, <strong>stored procedures</strong> (if supported) and <strong>tracking tables</strong> if needed. Create also <strong>scope_info</strong> and <strong>scope_info_client</strong> tables.
            <para>
            The <paramref name="provision" /> argument specify the objects to provision. See <see cref="T:Dotmim.Sync.Enumerations.SyncProvision" /> enumeration.
            </para>
            <para>
            If The <paramref name="setup" /> argument is not specified, setup is retrieved from the scope_info table. Means that you have done a provision before.
            </para>
            <para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var setup = new SyncSetup("ProductCategory", "Product");
            var sScopeInfo = await remoteOrchestrator.ProvisionAsync(setup);
            </code>
            </example>
            </para>
            </summary>
            <param name="scopeName">Scope name</param>
            <param name="setup">Setup containing all tables to provision on the server side</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers | SyncProvision.TrackingTable</c> is used.</param>
            <param name="overwrite">If specified, all metadatas are generated and overwritten even if they already exists</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">option IProgress{ProgressArgs}</param>
            <returns>
            A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance, saved locally in the server datasource.
            </returns> 
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Provision a server datasource (<strong>triggers</strong>, <strong>stored procedures</strong> (if supported) and <strong>tracking tables</strong> if needed. Create also <strong>scope_info</strong> and <strong>scope_info_client</strong> tables.
            <para>
            The <paramref name="provision" /> argument specify the objects to provision. See <see cref="T:Dotmim.Sync.Enumerations.SyncProvision" /> enumeration.
            </para>
            <para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var serverScope = await remoteOrchestrator.GetScopeInfoAsync();
            var schema = await remoteOrchestrator.GetSchemaAsync(setup);
            serverScope.Schema = schema;
            serverScope.Setup = setup;
            var sScopeInfo = await localOrchestrator.ProvisionAsync(serverScope);
            </code>
            </example>
            </para>
            </summary>
            <param name="serverScopeInfo"><see cref="T:Dotmim.Sync.ScopeInfo"/> instance to provision on server side</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers | SyncProvision.TrackingTable</c> is used.</param>
            <param name="overwrite">If specified, all metadatas are generated and overwritten even if they already exists</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">option IProgress{ProgressArgs}</param>
            <returns>
            A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance, saved locally in the server datasource.
            </returns> 
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Deprovision your server datasource.
            <example>
            Deprovision a server database:
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            await remoteOrchestrator.DeprovisionAsync();
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations
            </remarks>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">option IProgress{ProgressArgs}</param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Deprovision your client datasource.
            <example>
            Deprovision a client database:
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var setup = new SyncSetup("ProductCategory", "Product");
            await remoteOrchestrator.DeprovisionAsync(setup);
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations
            </remarks>
            <param name="scopeName">scopeName. If not defined, SyncOptions.DefaultScopeName is used</param>
            <param name="setup">Setup containing tables to deprovision</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <param name="cancellationToken">optional cancellation token</param>
            <param name="progress">optional IProgress{ProgressArgs}</param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DropAllAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Drop everything related to DMS. Tracking tables, triggers, tracking tables, sync_scope and sync_scope_client tables
            <example>
            Deprovision a server database:
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            await remoteOrchestrator.DropAllAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Create a remote orchestrator, used to orchestrates the whole sync on the server side
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.#ctor(Dotmim.Sync.CoreProvider)">
            <summary>
            Create a remote orchestrator, used to orchestrates the whole sync on the server side
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.BeginSessionAsync(System.String,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when a new synchronization session has started. Initialize the SyncContext instance, used for this session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.EndSessionAsync(Dotmim.Sync.SyncResult,System.String,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when the synchronization session is over.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalBeginSessionAsync(Dotmim.Sync.SyncContext,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when a session is starting
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalEndSessionAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncResult,Dotmim.Sync.ServerSyncChanges,Dotmim.Sync.SyncException,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Called when the sync is over
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetSnapshotAsync(Dotmim.Sync.ScopeInfo)">
            <summary>
            Get a snapshot
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalGetSnapshotAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Get a snapshot
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.CreateSnapshotAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters)">
            <summary>
            Create a snapshot, based on the Setup object. 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.CreateSnapshotAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters)">
            <summary>
            Create a snapshot, based on the Setup object. 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoClientAsync(System.Guid,System.String,Dotmim.Sync.SyncParameters,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a Scope Info Client from Server database
            <para>
            Client should have already made a sync to be present in the server database scope_info_client table
            </para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var cScopeInfoClient = await remoteOrchestrator.GetScopeInfoClientAsync(clientId, default, parameters);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
            <para>
            If the <strong>scope_info</strong> table is not existing, it will be created. If no scope is found, an empty scope will be created with empty schema and setup properties.
            </para>
            <example>
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(clientProvider);
             var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync();
             foreach (var schemaTable in scopeInfo.Schema.Tables)
             {
               Console.WriteLine($"Table Name: {schemaTable.TableName}");
                  
               foreach (var column in schemaTable.Columns)
                     Console.WriteLine($"Column Name: {column.ColumnName}");
             }
            </code>
            </example>
            </summary>
            <param name="scopeName"></param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
            <para>
            If the <strong>scope_info</strong> table is not existing, it will be created. The setup argument is used to get the tables schema and fill the <strong>Setup</strong> and <strong>Schema</strong> properties.
            </para>
            <example>
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(clientProvider);
             var setup = new SyncSetup("Product, ProductCategory");
             var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
             foreach (var schemaTable in scopeInfo.Schema.Tables)
             {
               Console.WriteLine($"Table Name: {schemaTable.TableName}");
                  
               foreach (var column in schemaTable.Columns)
                     Console.WriteLine($"Column Name: {column.ColumnName}");
             }
            </code>
            </example>
            </summary>
            <param name="setup"></param>
            <param name="connection">Optional Connection</param>
            <param name="transaction">Optional Transaction</param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.String,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalIsConflictingSetupAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Check 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.NeedsToUpgradeAsync(Dotmim.Sync.SyncContext)">
            <summary>
            Check if we need to upgrade the Database Structure
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalUpgradeAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Upgrade your <strong>server</strong> database to the last version <strong>0.9.6</strong>
            <para>
            As usual on the server side, the upgrade is manually, but pretty simple
            </para>
            <example>
            Here is an example where we are migrating a local server datasource where 2 scopes have been already used (1 with filters and the other one without filters)
            <code>
            var serverProvider = new SqlSyncProvider(serverCstring);
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider, syncOptions);
            
            var needsUpgrade = await remoteOrchestrator.NeedsToUpgradeAsync();
            
            if (needsUpgrade)
               var (scopeInfos, scopeInfoClients) = await remoteOrchestrator.UpgradeAsync(progress, evaluationOnly);
            </code>
            </example>
            </summary>
            <returns>
            The new scopeInfos and scopeInfoClients rows from your new upgrade sync config tables.
            </returns>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunnerExtensions.GetConnectionAsync(Dotmim.Sync.BaseOrchestrator,Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncMode,Dotmim.Sync.Enumerations.SyncStage,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Create a connection and transaction, encapsulated in a <see cref="T:Dotmim.Sync.DbConnectionRunner"/> instance that is disposable
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DbConnectionRunner">
            <summary>
            Disposable runner to encapsulate a connection and a transaction
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.CommitAsync(System.Boolean)">
            <summary>
            Commit the transaction and call an interceptor
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.CloseAsync">
            <summary>
            Commit the transaction and call an interceptor
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.RollbackAsync(System.String)">
            <summary>
            Rollback a transaction
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.Dispose(System.Boolean)">
            <summary>
            Dispose the current transaction and connection
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.DisposeAsync">
            <summary>
            Async dispose, when using "await using var runner = await this.GetConnectionAsync()"
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncParameter">
            <summary>
            Encapsulates information sent from the client to the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameter.Name">
            <summary>
            Gets or sets the name of the column from the table involved in filter.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameter.#ctor">
            <summary>
            Initializes a new instance of the SyncParameter class by using default values.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Synchronization.Data.SyncParameter" /> class by 
            using name and value parameters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.InnerCollection">
            <summary>
            Gets or Sets the InnerCollection (Exposed as Public for serialization purpose)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Add``1(System.String,``0)">
            <summary>
            Add a new sync parameter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Add(Dotmim.Sync.SyncParameter)">
            <summary>
            Add a new sync parameter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.AddRange(System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncParameter})">
            <summary>
            Add an array of parameters
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.Item(System.String)">
            <summary>
            Get a parameters by its name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ScopeInfo">
            <summary>
            Mapping sur la table ScopeInfo
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfo.#ctor">
            <summary>
            For serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Name">
            <summary>
            Scope name. Shared by all clients and the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Schema">
            <summary>
            Scope schema. stored locally on the client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Setup">
            <summary>
            Setup. stored locally on the client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Version">
            <summary>
            Gets or Sets the schema version
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.LastCleanupTimestamp">
            <summary>
            Gets or Sets the last timestamp a sync has occured. This timestamp is set just 'before' sync start.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Properties">
            <summary>
            Gets or Sets the additional properties. 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfo.ToString">
            <summary>
            Get the scope name / last cleanup / setup tables count
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoClient">
            <summary>
            Mapping sur la table ScopeInfo
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoClient.#ctor">
            <summary>
            For serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Id">
            <summary>
            Id of the scope owner
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Name">
            <summary>
            Scope name. Shared by all clients and the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Hash">
            <summary>
            Scope Hash: Filters hash or null
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSyncTimestamp">
            <summary>
            Gets or Sets the last timestamp a sync has occured. This timestamp is set just 'before' sync start.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastServerSyncTimestamp">
            <summary>
            Gets or Sets the last server timestamp a sync has occured for this scope client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.IsNewScope">
            <summary>
            Gets or Sets if the client scope is new in the local datasource.
            If new, we will override timestamp for first synchronisation to be sure to get all datas from server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Parameters">
            <summary>
            Gets or Sets the parameters 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSync">
            <summary>
            Gets or Sets the last datetime when a sync has successfully ended.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSyncDuration">
            <summary>
            Gets or Sets the last duration a sync has occured. 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Properties">
            <summary>
            Gets or Sets the additional properties. 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Errors">
            <summary>
            Gets or Sets the errors batch info occured on last sync 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSyncDurationString">
            <summary>
            Gets a readable version of LastSyncDuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoClient.ShadowScope(Dotmim.Sync.ScopeInfoClient)">
            <summary>
            Make a shadow copy of an old scope to get the last sync information copied on this scope
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.DmUtils.GetMembers(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Get the Fields and properties from a current type
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.DmUtils.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Get a member value
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.DmUtils.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Set an object value
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.DmUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Look if a property is an indexer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.DmUtils.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Get the member Type
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.DmUtils.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Dotmim.Sync.Serialization.IConverter.Key">
            <summary>
            get the unique key for this converter
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.IConverter.BeforeSerialize(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable)">
            <summary>
            Convert a row before being serialized
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.IConverter.AfterDeserialized(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable)">
            <summary>
            Convert a row afeter being deserialized
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.ISerializerFactory">
            <summary>
            Represents a factory of generic serializers.
            This object should be able to get a serializer of each type of T
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.ISerializer">
            <summary>
            Represents a generic serializer for a defined type
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.LocalJsonSerializer">
            <summary>
            Serialize json rows locally
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.LocalJsonSerializer.IsOpen">
            <summary>
            Returns if the file is opened
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.LocalJsonSerializer.Extension">
            <summary>
            Gets the file extension
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.CloseFile">
            <summary>
            Close the current file, close the writer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.OpenFile(System.String,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Boolean)">
            <summary>
            Open the file and write header
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.WriteRowToFileAsync(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable)">
            <summary>
            Append a sync row to the writer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.OnWritingRow(System.Func{Dotmim.Sync.SyncTable,System.Object[],System.Threading.Tasks.Task{System.String}})">
            <summary>
            Interceptor on writing row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.OnReadingRow(System.Func{Dotmim.Sync.SyncTable,System.String,System.Threading.Tasks.Task{System.Object[]}})">
            <summary>
            Interceptor on reading row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.GetCurrentFileSizeAsync">
            <summary>
            Gets the file size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.GetSchemaTableFromFile(System.String)">
            <summary>
            Get the table contained in a serialized file
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.GetRowsFromFile(System.String,Dotmim.Sync.SyncTable)">
            <summary>
            Enumerate all rows from file
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.SerializersCollection.JsonSerializerFactory">
            <summary>
            Get the default Json serializer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.SerializersCollection.#ctor">
            <summary>
            Create a default collection with 2 known serializers
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerSet.Tables">
            <summary>
            List of tables
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerSet.HasTables">
            <summary>
            Check if we have some tables in the container
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerSet.HasRows">
            <summary>
            Check if we have at least one table with one row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerSet.RowsCount">
            <summary>
            Getting the container rows count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.Columns">
            <summary>
            Get or Set the columns name used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.Rows">
            <summary>
            List of rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.HasRows">
            <summary>
            Check if we have rows in this container table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.ColumnName">
            <summary>Gets or sets the name of the column</summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.#ctor">
            <summary>
            Ctor for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.#ctor(System.String)">
            <summary>
            Create a new column with the given name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.#ctor(System.String,System.Type)">
            <summary>
            Create a new column with the given name and given type
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.SetType(System.Type)">
            <summary>
            Set the SyncColumn Type (if the type was not set with the correct ctor)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.Create``1(System.String)">
            <summary>
            Create a new SchemaColumn of type T
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.Clone">
            <summary>
            Clone a SyncColumn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetDbType">
            <summary>
            Get the DbType in a normal DbType type
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.CoerceDbType">
            <summary>
            Evaluate DbType, if needed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetDataType">
            <summary>
            Get DataType from compressed string type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetTypeFromAssemblyQualifiedName(System.String)">
            <summary>
            Get DataType from a string value
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetAssemblyQualifiedName(System.Type)">
            <summary>
            Compress string representation of the DataType to be more concise in the serialized stream
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetAutoIncrementSeedAndStep">
            <summary>
            Get auto inc values, coercing Step
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetDefaultValue">
            <summary>
            Gets or Sets the default value
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.IsValueType">
            <summary>
            Gets if the column type is a value type
            </summary>
        </member>
        <member name="F:Dotmim.Sync.SyncColumn.StorageClassType">
            <summary>
             Collection of autorized types
             each type is marked as Value type or not
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.Table">
            <summary>
            Column's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.#ctor(Dotmim.Sync.SyncTable)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.EnsureColumns(Dotmim.Sync.SyncTable)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.Item(System.String)">
            <summary>
            Get a Column by its name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.HasSyncColumnOfType(System.Type)">
            <summary>
            Returns a bool indicating if the columns contains at least one column of type argument
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Add(Dotmim.Sync.SyncColumn)">
            <summary>
            Add a new Column to the Schema Column collection
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.AddRange(Dotmim.Sync.SyncColumn[])">
            <summary>
            Add a collection of columns
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Reorder(Dotmim.Sync.SyncColumn,System.Int32)">
            <summary>
            Reorganize columns order
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Clear">
            <summary>
            Clear all the relations
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilter">
            <summary>
            Design a filter clause on Dmtable
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Parameters">
            <summary>
            Gets or Sets the parameters list, used as input in the stored procedure
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Wheres">
            <summary>
            Gets or Sets side where filters list
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Joins">
            <summary>
            Gets or Sets side where filters list
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.CustomWheres">
            <summary>
            Gets or Sets customs where
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Schema">
            <summary>
            Gets the ShemaFilter's SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.#ctor(System.String,System.String)">
            <summary>
            Creates a filterclause allowing to specify a different DbType.
            If you specify the columnType, Dotmim.Sync will expect that the column does not exist on the table, and the filter is only
            used as a parameter for the selectchanges stored procedure. Thus, IsVirtual would be true
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.Clone">
            <summary>
            Clone the SyncFilter
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.EnsureFilter(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter has the correct schema (since the property is not serialized
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.#ctor">
            <summary>
            For Serializer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.GetFilterName">
            <summary>
            Get unique filter name, composed by all parameters name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.EqualsByProperties(Dotmim.Sync.SyncFilter)">
            <summary>
            Compare all properties to see if object are Equals by all properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoin.EnsureFilterJoin(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter parameter as the correct schema (since the property is not serialized)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.Schema">
            <summary>
            Gets the ShemaTable's SyncSchema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.Schema">
            <summary>
            Filter's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Add(Dotmim.Sync.SyncFilterJoin)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterParameter">
            <summary>
            Represents a filter parameters
            For example : @CustomerID int NULL = 12
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.Schema">
            <summary>
            Gets the ShemaTable's SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.#ctor(System.String,System.String)">
            <summary>
            Create a new filter parameter with the given name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new filter parameter with the given name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.EnsureFilterParameter(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter parameter as the correct schema (since the property is not serialized)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            for SQL, will be named @{ParamterName}
            for MySql, will be named in_{ParameterName}
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.TableName">
            <summary>
            Gets or Sets table name, if parameter is linked to a table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.SchemaName">
            <summary>
            Gets or sets schema name, if parameter is linked to a table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.DbType">
            <summary>
            Gets or Sets the parameter db type
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.DefaultValue">
            <summary>
            Gets or Sets the parameter default value expression.
            Be careful, must be expresse in data source language
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.AllowNull">
            <summary>
            Gets or Sets if the parameter is default null
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.MaxLength">
            <summary>
            Gets or Sets the parameter max length (if needed)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed as same by name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.Schema">
            <summary>
            Filter's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Add(Dotmim.Sync.SyncFilterParameter)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.Item(System.String)">
            <summary>
            Get a table by its name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.Schema">
            <summary>
            Filter's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Add(Dotmim.Sync.SyncFilter)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Add(Dotmim.Sync.SetupFilter)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Add(System.String,System.String,System.String)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItem.Schema">
            <summary>
            Gets the ShemaTable's SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItem.EnsureFilterWhereSideItem(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter parameter as the correct schema (since the property is not serialized)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItem.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed as same by name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.Schema">
            <summary>
            Filter's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Add(Dotmim.Sync.SyncFilterWhereSideItem)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncNamedItem`1">
            <summary>
            Based object that can be compared by name or by properties
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties">
            <summary>
            Get all comparable names properties to determine if two instances are identifed as "same" based on their name properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.EqualsByName(`0)">
            <summary>
            Gets a true boolean if other instance has the same name, defined by properties marked as names
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            By default, if not overriden, check the names properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.Equals(`0)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.Equals(System.Object)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.RelationName">
            <summary>
            Gets or Sets the relation name 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.ParentKeys">
            <summary>
            Gets or Sets a list of columns that represent the parent key.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.Keys">
            <summary>
            Gets or Sets a list of columns that represent the parent key.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.Schema">
            <summary>
            Gets the ShemaFilter's SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.Clear">
            <summary>
            Clear 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.EnsureRelation(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure this relation has correct Schema reference
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.GetParentTable">
            <summary>
            Get parent table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.GetTable">
            <summary>
            Get child table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.Schema">
            <summary>
            Relation's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.EnsureRelations(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Add(Dotmim.Sync.SyncRelation)">
            <summary>
            Add a new table to the Schema table collection
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Clear">
            <summary>
            Clear all the relations
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.SchemaTable">
            <summary>
            Gets or Sets the row's table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.#ctor(Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState)">
            <summary>
            Add a new buffer row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.#ctor(Dotmim.Sync.SyncTable,System.Object[])">
            <summary>
            Add a new buffer row. This ctor does not make a copy
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.RowState">
            <summary>
            Gets the state of the row
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Length">
            <summary>
            Gets the row Length
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Item(System.Int32)">
            <summary>
            Get the value in the array that correspond to the column index given
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Item(Dotmim.Sync.SyncColumn)">
            <summary>
            Get the value in the array that correspond to the SchemaColumn instance given
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Item(System.String)">
            <summary>
            Get the value in the array that correspond to the column name given
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.ToArray">
            <summary>
            Get the inner copy array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.Clear">
            <summary>
            Clear the data in the buffer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.ToString">
            <summary>
            ToString()
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.EnsureRows(Dotmim.Sync.SyncTable)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Add(System.Object[])">
            <summary>
            Add a new buffer row. Be careful, row should include state in first index
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.AddRange(System.Collections.Generic.IEnumerable{System.Object[]})">
            <summary>
            Add a rows. Be careful, row should include state in first index
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Add(Dotmim.Sync.SyncRow)">
            <summary>
            Add a new row to the collection
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.GetRowByPrimaryKeys(Dotmim.Sync.SyncRow,System.Collections.Generic.IList{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable)">
            <summary>
            Make a filter on primary keys
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.TryEnsureData(Dotmim.Sync.SyncRow)">
            <summary>
            Ensure schema and data are correctly related
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.GetConverter(System.Type)">
            <summary>
            Get type converter
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Clear">
            <summary>
            Clear all rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.Tables">
            <summary>
            Gets or Sets the sync set tables
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.Relations">
            <summary>
            Gets or Sets an array of every SchemaRelation belong to this Schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.Filters">
            <summary>
            Filters applied on tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.#ctor">
            <summary>
            Create a new SyncSet, empty
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.#ctor(Dotmim.Sync.SyncSetup)">
            <summary>
            Creates a new SyncSet based on a Sync setup (containing tables)
            </summary>
            <param name="setup"></param>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.EnsureSchema">
            <summary>
            Ensure all tables, filters and relations has the correct reference to this schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Clone(System.Boolean)">
            <summary>
            Clone the SyncSet schema (without data)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Clear">
            <summary>
            Clear the SyncSet
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Dispose">
            <summary>
            Dispose the whole SyncSet
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.HasTables">
            <summary>
            Check if Schema has tables
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.HasColumns">
            <summary>
            Check if Schema has at least one table with columns
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.HasRows">
            <summary>
            Gets if at least one table as at least one row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Equals(Dotmim.Sync.SyncSet)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Equals(System.Object)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncTable">
            <summary>
            Represents a table schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.SchemaName">
            <summary>
            Get or Set the schema used for the DmTableSurrogate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.OriginalProvider">
            <summary>
            Gets or Sets the original provider (SqlServer, MySql, Sqlite, Oracle, PostgreSQL)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.Columns">
            <summary>
            Gets or Sets the table columns
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.PrimaryKeys">
            <summary>
            Gets or Sets the table primary keys
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.Rows">
            <summary>
            Gets the ShemaTable's rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.Schema">
            <summary>
            Gets the ShemaTable's SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.#ctor(System.String)">
            <summary>
            Create a new sync table with the given name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.#ctor(System.String,System.String)">
            <summary>
            Create a new sync table with the given name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.EnsureTable(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure table as the correct schema (since the property is not serialized
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.Clear">
            <summary>
            Clear the Table's rows
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.Clone">
            <summary>
            Clone the table structure (without rows)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.NewRow(Dotmim.Sync.Enumerations.SyncRowState)">
            <summary>
            Create a new row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetFullName">
            <summary>
            Gets the full name of the table, based on schema name + "." + table name (if schema name exists)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetMutableColumns(System.Boolean,System.Boolean)">
            <summary>
            Get all columns that can be updated
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetPrimaryKeysColumns">
            <summary>
            Get all columns that are Primary keys, based on the names we have in PrimariKeys property
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetFilter">
            <summary>
            Get all filters for a selected sync table
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.IsPrimaryKey(System.String)">
            <summary>
            Check if a column name is a primary key
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.HasAutoIncrementColumns">
            <summary>
            Gets a value returning if the SchemaTable contains an auto increment column
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.HasRows">
            <summary>
            Gets a value indicating if the synctable has rows
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed as same by name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Schema">
            <summary>
            Table's schema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Create a new collection of tables for a SyncSchema
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.EnsureTables(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Item(System.String)">
            <summary>
            Get a table by its name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Item(System.String,System.String)">
            <summary>
            Get a table by its name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Add(Dotmim.Sync.SyncTable)">
            <summary>
            Add a new table to the Schema table collection
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Add(System.String)">
            <summary>
            Add a table, by its name. Be careful, can contains schema name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add some tables to ContainerSet Tables property
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Clear">
            <summary>
            Clear all the Tables
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupColumns">
            <summary>
            List of columns within a table, to add to the sync process 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Add(System.String)">
            <summary>
            Add a new column to the list of columns to be added to the sync
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a range of columns to the sync process setup
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.AddRange(System.String[])">
            <summary>
            Add a range of columns to the sync process setup
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Clear">
            <summary>
            Clear all columns
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.Item(System.String)">
            <summary>
            Get a Column by its name
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupFilter">
            <summary>
            Design a filter clause on Dmtable
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.TableName">
            <summary>
            Gets or Sets the name of the table where the filter will be applied (and so the _Changes stored proc)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.SchemaName">
            <summary>
            Gets or Sets the schema name of the table where the filter will be applied (and so the _Changes stored proc)
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.Joins">
            <summary>
            Gets the custom joins list, used with custom wheres
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.CustomWheres">
            <summary>
            Gets the custom joins list, used with custom wheres
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.Parameters">
            <summary>
            Gets the parameters list, used as input in the stored procedure
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.Wheres">
            <summary>
            Side where filters list
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.#ctor(System.String,System.String)">
            <summary>
            Creates a filterclause allowing to specify a different DbType.
            If you specify the columnType, Dotmim.Sync will expect that the column does not exist on the table, and the filter is only
            used as a parameter for the selectchanges stored procedure. Thus, IsVirtual would be true
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddParameter(System.String,System.Data.DbType,System.Boolean,System.String,System.Int32)">
            <summary>
            Add a parameter as input to stored procedure
            <paramref name="parameterName" /> can be anything and later used to compare to a column of the same type with <see cref="M:Dotmim.Sync.SetupFilter.AddWhere(System.String,System.String,System.String,System.String)"/>
            For SQL Server, parameter will be added as @{parameterName}
            For MySql, parameter will be added as in_{parameterName}
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddParameter(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add a parameter based on a column. 
            <paramref name="columnName" /> refers to both the name of the parameter and column
            For SQL Server, parameter will be added as @{parameterName}
            For MySql, parameter will be added as in_{parameterName}
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddParameter(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add a parameter based on a column. 
            <paramref name="columnName" /> refers to both the name of the parameter and column
            For SQL Server, parameter will be added as @{parameterName}
            For MySql, parameter will be added as in_{parameterName}
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddJoin(Dotmim.Sync.Join,System.String)">
            <summary>
            Add a custom filter clause
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddJoin(Dotmim.Sync.SetupFilterJoin)">
            <summary>
            Internal add custom join
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddWhere(System.String,System.String,System.String,System.String)">
            <summary>
            Add a Where clause. 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddCustomWhere(System.String)">
            <summary>
            Add a custom Where clause. 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.#ctor">
            <summary>
            For Serializer
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed as same by name
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.EqualsByProperties(Dotmim.Sync.SetupFilter)">
            <summary>
            Compare all properties to see if object are Equals by all properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterJoin.#ctor">
            <summary>
            ctor for serializer, don't use as it, prefer the second ctor
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterJoin.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed are same by name
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Setup.SetupFilterParameter">
            <summary>
            Represents a filter parameters
            For example : @CustomerID int NULL = 12
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            for SQL, will be named @{ParamterName}
            for MySql, will be named in_{ParameterName}
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.TableName">
            <summary>
            Gets of Sets the table name if parameter is a column 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.SchemaName">
            <summary>
            Gets of Sets the table schema name if parameter is a column 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.DbType">
            <summary>
            Gets or Sets the parameter db type
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.DefaultValue">
            <summary>
            Gets or Sets the parameter default value expression.
            Be careful, must be expresse in data source language
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.AllowNull">
            <summary>
            Gets or Sets if the parameter is default null
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.MaxLength">
            <summary>
            Gets or Sets the parameter max length (if needed)
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Setup.SetupFilterWhere.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed as same by name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilters.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.#ctor">
            <summary>
            Create a default collection for Serializers
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Add(Dotmim.Sync.SetupFilter)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add a new filter 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationResults.AllStoredProcedures">
            <summary>
            Gets or Sets a boolean indicating that all tables should recreate their own stored procedures
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationResults.AllTriggers">
            <summary>
            Gets or Sets a boolean indicating that all tables should recreate their own triggers
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationResults.AllTrackingTables">
            <summary>
            Gets or Sets a boolean indicating that all tables should recreate their tracking table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationResults.Tables">
            <summary>
            Tables involved in the migration
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationSetupTable.SetupTable">
            <summary>
            Table to migrate
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationSetupTable.StoredProcedures">
            <summary>
            Gets or Sets a boolean indicating that this table should recreate the stored procedures
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationSetupTable.Triggers">
            <summary>
            Gets or Sets a boolean indicating that this table should recreate triggers
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationSetupTable.TrackingTable">
            <summary>
            Gets or Sets a boolean indicating that this table should recreate the tracking table
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationSetupTable.ShouldMigrate">
            <summary>
            Gets a value indicating if the table should be migrated
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MigrationSetupTable.Table">
            <summary>
            Gets or Sets a boolean indicating that this table should be recreated
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.#ctor">
            <summary>
            public ctor for serialization purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.TableName">
            <summary>
            Gets or Sets the table name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.SchemaName">
            <summary>
            Gets or Sets the schema name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.Columns">
            <summary>
            Gets or Sets the table columns collection
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.SyncDirection">
            <summary>
            Gets or Sets the Sync direction (may be Bidirectional, DownloadOnly, UploadOnly) 
            Default is Bidirectional
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.HasColumns">
            <summary>
            Check if SetupTable has columns. If not columns specified, all the columns from server database are retrieved
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.#ctor(System.String,System.String)">
            <summary>
            Specify a table to add to the sync process
            If you don't specify any columns, all columns in the data source will be imported
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Specify a table and its columns, to add to the sync process
            If you're specifying some columns, all others columns in the data source will be ignored
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.ToString">
            <summary>
            ToString override. Gets the full name + columns count
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.GetFullName">
            <summary>
            Gets the full name of the table, based on schema name + "." + table name (if schema name exists)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.EqualsByProperties(Dotmim.Sync.SetupTable)">
            <summary>
            Compare 2 SetupTable instances. Assuming table name and schema name are equals, we have two conflicting setup tables
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.GetAllNamesProperties">
            <summary>
            Get all comparable fields to determine if two instances are identifed as same by name
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupTables">
            <summary>
            Represents a list of tables to be added to the sync process
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.InnerCollection">
            <summary>
            Exposing the InnerCollection for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.#ctor">
            <summary>
            ctor for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a list of tables to be added to the sync process
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Add(System.String,System.String)">
            <summary>
            Add a new table to the collection of tables to be added to the sync process
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Add(Dotmim.Sync.SetupTable)">
            <summary>
            Add a new table to the collection of tables to be added to the sync process
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.AddRange(System.Collections.Generic.IEnumerable{Dotmim.Sync.SetupTable})">
            <summary>
            Add a collection of tables to be added to the sync process
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a collection of tables to be added to the sync process
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.Item(System.String)">
            <summary>
            Get a table by its name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.Item(System.String,System.String)">
            <summary>
            Get a table by its name
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.HasTables">
            <summary>
            Check if Setup has tables
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.HasColumns">
            <summary>
            Check if Setup has at least one table with columns
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.Tables">
            <summary>
            Gets or Sets the tables involved in the sync
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.Filters">
            <summary>
            Gets or Sets the filters involved in the sync
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.StoredProceduresPrefix">
            <summary>
            Specify a prefix for naming stored procedure. Default is empty string
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.StoredProceduresSuffix">
            <summary>
            Specify a suffix for naming stored procedures. Default is empty string
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TriggersPrefix">
            <summary>
            Specify a prefix for naming stored procedure. Default is empty string
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TriggersSuffix">
            <summary>
            Specify a suffix for naming stored procedures. Default is empty string
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TrackingTablesPrefix">
            <summary>
            Specify a prefix for naming tracking tables. Default is empty string
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TrackingTablesSuffix">
            <summary>
            Specify a suffix for naming tracking tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a list of tables to be added to the sync process
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.#ctor(System.String[])">
            <summary>
            Create a list of tables to be added to the sync process
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.HasTables">
            <summary>
            Check if Setup has tables
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.HasColumns">
            <summary>
            Check if Setup has at least one table with columns
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.HasTableWithColumns(System.String)">
            <summary>
            Check if Setup has a table that has columns
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.HasSameOptions(Dotmim.Sync.SyncSetup)">
            <summary>
            Check if two setups have the same local options
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.HasSameStructure(Dotmim.Sync.SyncSetup)">
            <summary>
            Check if two setups have the same tables / filters structure
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.Equals(Dotmim.Sync.SyncSetup)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.Equals(System.Object)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncAgent">
            <summary>
            Sync agent. It's the sync orchestrator
            Knows both the Sync Server provider and the Sync Client provider
            </summary>
            <summary>
            Sync agent. It's the sync orchestrator
            Knows both the Sync Server provider and the Sync Client provider
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.SessionState">
            <summary>
            Defines the state that a synchronization session is in.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.LocalOrchestrator">
            <summary>
            Gets or Sets the local orchestrator
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.RemoteOrchestrator">
            <summary>
            Get or Sets the remote orchestrator
            </summary>
        </member>
        <member name="E:Dotmim.Sync.SyncAgent.SessionStateChanged">
            <summary>
            Occurs when sync is starting, ending
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.Options">
            <summary>
            Gets the options used on this sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.OnApplyChangesConflictOccured(System.Action{Dotmim.Sync.ApplyChangesConflictOccuredArgs})">
            <summary>
            Shortcut to Apply changed conflict occured if remote orchestrator supports it
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.OnApplyChangesConflictOccured(System.Func{Dotmim.Sync.ApplyChangesConflictOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Shortcut to Apply changed conflict occured if remote orchestrator supports it
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.LockSync">
            <summary>
            Lock sync to prevent multi call to sync at the same time
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.UnlockSync">
            <summary>
            Unlock sync to be able to launch a new sync
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Creates a synchronization agent that will handle a full synchronization between a client and a server.
            </summary>
            <param name="clientProvider">Local Provider connecting to your client database</param>
            <param name="serverProvider">Local Provider connecting to your server database</param>
            <param name="options">Sync Options defining options used by your local and remote provider</param>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.RemoteOrchestrator,Dotmim.Sync.SyncOptions)">
            <summary>
            Creates a synchronization agent that will handle a full synchronization between a client and a server.
            </summary>
            <param name="clientProvider">local provider to your client database</param>
            <param name="remoteOrchestrator">Remote Orchestrator already configured with a SyncProvider</param>
            <param name="options">Sync Options defining options used by your local provider (and remote provider if type of remoteOrchestrator is not a WebRemoteOrchestrator)</param>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor(Dotmim.Sync.LocalOrchestrator,Dotmim.Sync.RemoteOrchestrator)">
            <summary>
            Creates a synchronization agent that will handle a full synchronization between a client and a server.
            </summary>
            <param name="localOrchestrator">Local Orchestrator already configured with a SyncProvider</param>
            <param name="remoteOrchestrator">Remote Orchestrator already configured with a SyncProvider</param>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.EnsureOptionsAndSetupInstances">
            <summary>
            Ensure Options and Setup instances are the same on local orchestrator and remote orchestrator
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.Threading.CancellationToken,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a synchronization with the specified mode
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.Synchronization.Data.DbSyncBatchInfo" />.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used 
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="tables">Tables list to synchronize</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="tables">Tables list to synchronize</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="tables">Tables list to synchronize</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="tables">Tables list to synchronize</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="tables">Tables list to synchronize</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="tables">Tables list to synchronize</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="tables">Tables list to synchronize</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="tables">Tables list to synchronize</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope
            </summary>
            <param name="scopeName">Named scope</param>
            <param name="setup">Setup instance containing the table list and optionnally columns</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload</param>
            <param name="parameters">Parameters values for each of your setup filters</param>
            <param name="progress">IProgress instance to get a progression status during sync</param>
            <returns>Computed sync results</returns>
        </member>
        <member name="T:Dotmim.Sync.ClientSyncChanges">
            <summary>
            Client changes selected and server changes applied on client + stats
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ClientSyncChanges.#ctor(System.Int64,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.DatabaseChangesSelected,Dotmim.Sync.DatabaseChangesApplied)">
            <summary>
            Client changes selected and server changes applied on client + stats
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientTimestamp">
            <summary>
            Gets the timestamp limit used to get the changes
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientBatchInfo">
            <summary>
            Gets the batches serialized locally with all changes. Is Null if called from GetEstimatedChanges
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientChangesSelected">
            <summary>
            Gets statistics about changes selected
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientChangesApplied">
            <summary>
            Gets the changes applied on client, plus failed rows
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ServerSyncChanges">
            <summary>
            Server changes selected and client changes applied on server + stats
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ServerSyncChanges.#ctor(System.Int64,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.DatabaseChangesSelected,Dotmim.Sync.DatabaseChangesApplied)">
            <summary>
            Server changes selected and client changes applied on server + stats
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.RemoteClientTimestamp">
            <summary>
            Gets the timestamp limit used to get the changes
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.ServerBatchInfo">
            <summary>
            Gets the batches serialized locally with all changes
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.ServerChangesSelected">
            <summary>
            Gets statistics about changes selected
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.ServerChangesApplied">
            <summary>
            Gets server changes applied + failed applied rows
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncConflict">
            <summary>
            Represents a synchronization conflict at the row level.
            Conflict rule resolution is set on the server side
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncConflict.LocalRow">
            <summary>
            Gets the row that contains the conflicting row from the local database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncConflict.RemoteRow">
            <summary>
            Gets the row that contains the conflicting row from the remote database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncConflict.Type">
            <summary>
            Gets or sets the ConflictType enumeration value that represents the type of synchronization conflict.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.#ctor">
            <summary>
            Initializes a new instance of the SyncConflict class by using default values.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.#ctor(Dotmim.Sync.Enumerations.ConflictType)">
            <summary>
            Initializes a new instance of the SyncConflict class by using conflict type and conflict stage parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.AddLocalRow(Dotmim.Sync.SyncRow)">
            <summary>
            add a local row
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.AddRemoteRow(Dotmim.Sync.SyncRow)">
            <summary>
            add a remote row
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncContext">
            <summary>
            Context of the current Sync session
            Encapsulates data changes and metadata for a synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SessionId">
            <summary>
            Current Session, in progress
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.ClientId">
            <summary>
            Current Scope Info Id, in progress
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.ScopeName">
            <summary>
            Gets or Sets the ScopeName for this sync session
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SyncType">
            <summary>
            Gets or sets the sync type used during this session. Can be : Normal, Reinitialize, ReinitializeWithUpload
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SyncWay">
            <summary>
            Gets or Sets the current Sync direction. 
            When locally GetChanges and remote ApplyChanges, we are in Upload direction
            When remote GetChanges and locally ApplyChanges, we are in Download direction
            this Property is used to check SyncDirection on each table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SyncStage">
            <summary>
            Actual sync stage
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.Parameters">
            <summary>
            Get or Sets the Sync parameter to pass to Remote provider for filtering rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.Hash">
            <summary>
            Get or Sets the Sync parameter to pass to Remote provider for filtering rows
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.AdditionalProperties">
            <summary>
            Get or Sets additional properties you want to use
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.ProgressPercentage">
            <summary>
            Gets or Sets the current percentage progress overall
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.#ctor(System.Guid,System.String,Dotmim.Sync.SyncParameters)">
            <summary>
            Ctor. New sync context with a new Guid
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.#ctor">
            <summary>
            Used for serialization purpose
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.CopyTo(Dotmim.Sync.SyncContext)">
            <summary>
            Copy local properties to another syncContext instance
            </summary>
            <param name="otherSyncContext"></param>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.ToString">
            <summary>
            Get the result if sync session is ended
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncException">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.BaseMessage">
            <summary>
            Base message
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.TypeName">
            <summary>
            Gets or Sets type name of exception
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.SyncStage">
            <summary>
            Sync stage when exception occured
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.Number">
            <summary>
            Data source error number if available
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.DataSource">
            <summary>
            Gets or Sets data source if available
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.InitialCatalog">
            <summary>
            Gets or Sets initial catalog if available
            </summary>
        </member>
        <member name="T:Dotmim.Sync.UnknownException">
            <summary>
            Unknown Exception
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RollbackException">
            <summary>
            Rollback Exception
            </summary>
        </member>
        <member name="T:Dotmim.Sync.AlreadyInProgressException">
            <summary>
            Occurs when trying to launch another sync during an in progress sync.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ConnectionClosedException">
            <summary>
            Occurs when trying to use a closed connection
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FormatTypeException">
            <summary>
            Occurs when trying to launch another sync during an in progress sync.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InvalidRemoteOrchestratorException">
            <summary>
            Occurs when a bad SyncProvision is provided to a local orchestrator
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException">
            <summary>
            Occurs when a bad SyncProvision is provided to a local orchestrator
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException">
            <summary>
            Occurs when a bad SyncProvision is provided to a remote orchestrator
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingConnectionException">
            <summary>
            Occurs when a connection is missing
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingLocalOrchestratorSchemaException">
            <summary>
            Occurs when a schema is needed, but does not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingRemoteOrchestratorSchemaException">
            <summary>
            Occurs when a schema is needed, but does not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingClientScopeInfoException">
            <summary>
            Occurs when a scope info is needed, but does not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingServerScopeInfoException">
            <summary>
            Occurs when a scope info is needed, but does not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InvalidScopeInfoException">
            <summary>
            Occurs when a scope info is not good, conflicting with the one from the orchestrator
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingPrimaryKeyException">
            <summary>
            Occurs when primary key is missing in the table schema
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingTableException">
            <summary>
            Setup table exception. Used when a setup table is defined that does not exist in the data source
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupConflictOnClientException">
            <summary>
            Setup Conflict, when setup provided by the user in code is different from the one in database.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupConflictOnServerException">
            <summary>
            Setup Conflict, when setup provided by the user in code is different from the one in database.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingColumnException">
            <summary>
            Setup column exception. Used when a setup column  is defined that does not exist in the data source table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingsColumnException">
            <summary>
            Setup columns exception. Used when a setup table has no columns during provisioning.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingPrimaryKeyColumnException">
            <summary>
            Setup column exception. Used when a setup column  is defined that does not exist in the data source table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingProviderException">
            <summary>
            Setup table exception. Used when a your setup does not contains any table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingTablesException">
            <summary>
            Setup table exception. Used when a your setup does not contains any table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingServerScopeTablesException">
            <summary>
            Setup table exception. Used when a your setup does not contains any table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingSchemaInScopeException">
            <summary>
            No schema in the scope
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingColumnsException">
            <summary>
            Setup table exception. Used when a your setup does not contains any columns in table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MigrationTableDropNotAllowedException">
            <summary>
            During a migration, droping a table is not allowed
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MetadataException">
            <summary>
            Metadata exception.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RowOverSizedException">
            <summary>
            Occurs when a row is too big for download batch size
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingCommandException">
            <summary>
            Occurs when a command is missing
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingChangeTrackingException">
            <summary>
            Occurs when we use change tracking and it's not enabled on the source database
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingTrackingTableException">
            <summary>
            Occurs when we local orchestrator tries to update untracked rows, but no tracking table exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MissingDatabaseException">
            <summary>
            Occurs when we check database existence
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InvalidDatabaseVersionException">
            <summary>
            Occurs when we check database existence
            </summary>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedColumnTypeException">
            <summary>
            Occurs when a column is not supported by the Dotmim.Sync framework
            </summary>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedColumnNameException">
            <summary>
            Occurs when a column name is not supported by the Dotmim.Sync framework
            </summary>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException">
            <summary>
            Occurs when a column name is not supported by the Dotmim.Sync framework for a primary key
            </summary>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedServerProviderException">
            <summary>
            Occurs when a provider not supported as a server provider is used with a RemoteOrchestrator.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.OutOfDateException">
            <summary>
            Occurs when sync metadatas are out of date
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpEmptyResponseContentException">
            <summary>
            Http empty response exception.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpHeaderMissingException">
            <summary>
            Occurs when a header is missing in the http request
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpCacheNotConfiguredException">
            <summary>
            Occurs when a cache is not set on the server
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpSerializerNotConfiguredException">
            <summary>
            Occurs when a Serializer is not available on the server side
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpConverterNotConfiguredException">
            <summary>
            Occurs when a Serializer is not available on the server side
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpScopeNameInvalidException">
            <summary>
            Occurs when a parameter has been already added in a filter parameter list
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HttpSessionLostException">
            <summary>
            Occurs when a session is lost during a sync session
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FilterParameterAlreadyExistsException">
            <summary>
            Occurs when a parameter has been already added in a filter parameter list
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FilterAlreadyExistsException">
            <summary>
            Occurs when a filter already exists for a named table
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FilterTrackingWhereException">
            <summary>
            Occurs when a filter column used as a filter for a tracking table, has not been added to the column parameters list
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FilterParamColumnNotExistsException">
            <summary>
            Occurs when a filter column used as a filter for a tracking table, but not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FilterParamTableNotExistsException">
            <summary>
            Occurs when a filter column used as a filter for a tracking table, but not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncParameterAlreadyExistsException">
            <summary>
            Occurs when a parameter has been already added to the parameter collection
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SnapshotNotExistsException">
            <summary>
            Occurs when trying to apply a snapshot that does not exists
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SnapshotMissingMandatariesOptionsException">
            <summary>
            Occurs when trying to create a snapshot but no directory and size have been set in the options
            </summary>
        </member>
        <member name="T:Dotmim.Sync.OptionsReferencesAreNotSameExecption">
            <summary>
            Occurs when options references are not the same
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupReferencesAreNotSameExecption">
            <summary>
            Occurs when setup references are not the same
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncHashException">
            <summary>
            Occurs when a hash from client or server is different from the hash recalculated from server or client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncGlobalization.DataSourceStringComparison">
            <summary>
            Gets or Sets the string comparison used when comparing string from data source.
            Default is Invariant Ignore Case
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncGlobalization.DataSourceNumberDecimalSeparator">
            <summary>
            Gets or Sets the number decimal separator used to parse decimal float and double from data source.
            Default is Invariant Number Decimal Separator (".")
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncGlobalization.IsCaseSensitive">
            <summary>
            Gets a boolean indicating if the StringComparison is case sensitive
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dotmim.Sync.SyncOptions">
            <summary>
            This class determines all the options you can set on Client and Server, that could potentially be different
            </summary>
        </member>
        <member name="F:Dotmim.Sync.SyncOptions.DefaultScopeInfoTableName">
            <summary>
            Default name if nothing is specified for the scope info table and scope info client table, stored on both side
            </summary>
        </member>
        <member name="F:Dotmim.Sync.SyncOptions.DefaultScopeName">
            <summary>
            Default scope name if not specified
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.BatchDirectory">
            <summary>
            Gets or Sets the directory used for batch mode.
            Default value is [User Temp Path]/[DotmimSync]
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.SnapshotsDirectory">
            <summary>
            Gets or Sets the directory where snapshots are stored.
            This value could be overwritten by server is used in an http mode
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.BatchSize">
            <summary>
            Gets or Sets the size used (approximatively in kb, depending on the serializer) for each batch file, in batch mode. 
            Default is 5000 
            Min value is 100
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.UseVerboseErrors">
            <summary>
            Gets or Sets the log level for sync operations. Default value is false.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.CleanMetadatas">
            <summary>
            Gets or Sets if we should clean tracking table metadatas.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.CleanFolder">
            <summary>
            Gets or Sets if we should cleaning tmp dir files after sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.DisableConstraintsOnApplyChanges">
            <summary>
            Gets or Sets if we should disable constraints before making apply changes 
            Default value is false
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ScopeInfoTableName">
            <summary>
            Gets or Sets the scope_info table name. Default is scope_info
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ConflictResolutionPolicy">
            <summary>
            Gets or Sets the default conflict resolution policy. This value could potentially be ovewritten and replaced by the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ErrorResolutionPolicy">
            <summary>
            Gets or Sets the default error resolution policy when an error occurs locally. 
            The error policy can be different on server / clients
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.Logger">
            <summary>
            Gets or Sets the default logger used for logging purpose
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ProgressLevel">
            <summary>
            Gets the Progress Level
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.DbCommandTimeout">
            <summary>
            Gets or Sets the sql commands timeout in the sync. 30 sec by default
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.TransactionMode">
            <summary>
            Gets or Sets the transaction mode for applying changes
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.#ctor">
            <summary>
            Create a new instance of options with default values
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.GetDefaultUserBatchDirectory">
            <summary>
            Get the default Batch directory full path ([User Temp Path]/[DotmimSync])
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.GetDefaultUserTempPath">
            <summary>
            Get the default user tmp folder
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.GetDefaultUserBatchDirectoryName">
            <summary>
            Get the default sync tmp folder name
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncPolicy">
            <summary>
            Simulate a Polly Policy. You're defining a policy, then you're executing a code that could potentially be retried a number of times, based on your policy
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncPolicy.RetryCount">
            <summary>
            Gets or Sets the max retry iteration count
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncPolicy.SleepDuration">
            <summary>
            Gets or Sets the Function that will define the duration to wait for the retry iteration N
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.Execute``1(System.Func{``0})">
            <summary>
            Execute an operation based on a retry policy, synchronously
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously, and return the result
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute an operation based on a retry policy, asynchronously, and return the result
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.InternalExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute an operation based on a retry policy, asynchronously, and return the result
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.RetryForever">
            <summary>
            Gets a policy retrying forever with no delay
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.RetryForever(System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying forever with no delay and a predicate used to define whether a policy handles a given exception
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.Retry(System.Int32)">
            <summary>
            Gets a policy retrying for a defined number of iterations, with no delay
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.Retry(System.Int32,System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying for a defined number of iterations, with no delay, and a predicate used to define whether a policy handles a given exception
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetryForever(System.TimeSpan)">
            <summary>
            Gets a policy retrying forever with a specified constant delay between each iteration
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetryForever(System.Func{System.Int32,System.TimeSpan},System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying forever with a predicate defining a delay between each iteration, based on the iteration index, and a predicate used to define whether a policy handles a given exception
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetry(System.Int32,System.TimeSpan)">
            <summary>
            Gets a policy retrying for a defined number of iterations, a specified constant delay between each iteration
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetry(System.Int32,System.TimeSpan,System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying for a defined number of iterations, a specified constant delay between each iteration, and a predicate used to define whether a policy handles a given exception
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetry(System.Int32,System.Func{System.Int32,System.TimeSpan},System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying for a defined number of iterations, with a predicate defining a delay between each iteration, based on the iteration index, and a predicate used to define whether a policy handles a given exception
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncResult">
            <summary>
            Compute all the results after a successfull sync. 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.SessionId">
            <summary>
            Current Session, in progress
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.StartTime">
            <summary>Gets or sets the time when a sync sessionn started.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ScopeName">
            <summary>
            Gets or Sets the ScopeName for this sync session
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.CompleteTime">
            <summary>
            Gets or sets the time when a sync session ended.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesAppliedOnClient">
            <summary>
            Gets the number of changes applied on the client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesAppliedOnServer">
            <summary>
            Gets the number of changes applied on the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesDownloadedFromServer">
            <summary>
            Gets total number of changes downloaded from server. 
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesUploadedToServer">
            <summary>
            Gets the number of change uploaded to the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalResolvedConflicts">
            <summary>
            Gets the number of conflicts resolved
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesFailedToApplyOnClient">
            <summary>
            Gets the number of row failed to apply on client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesFailedToApplyOnServer">
            <summary>
            Gets the number of sync errors
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ChangesAppliedOnServer">
            <summary>
            Gets or Sets the summary of client changes that where applied on the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ChangesAppliedOnClient">
            <summary>
            Gets or Sets the summary of server changes that where applied on the client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.SnapshotChangesAppliedOnClient">
            <summary>
            Gets or Sets the summary of snapshot changes that where applied on the client
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ClientChangesSelected">
            <summary>
            Gets or Sets the summary of client changes to be applied on the server
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ServerChangesSelected">
            <summary>
            Gets or Sets the summary of server changes selected to be applied on the client
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncResult.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncResult" />
        </member>
        <member name="M:Dotmim.Sync.SyncResult.#ctor(System.Guid)">
            <inheritdoc cref="T:Dotmim.Sync.SyncResult" />
        </member>
        <member name="M:Dotmim.Sync.SyncResult.ToString">
            <summary>
            Get the result if sync session is ended
            </summary>
        </member>
    </members>
</doc>
